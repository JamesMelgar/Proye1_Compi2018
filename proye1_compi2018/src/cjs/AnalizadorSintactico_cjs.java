
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package cjs;

import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico_cjs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico_cjs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico_cjs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_cjs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\006\005\000\002\007\006\000\002\007\005\000" +
    "\002\007\003\000\002\014\005\000\002\014\003\000\002" +
    "\003\003\000\002\016\006\000\002\016\010\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\003\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\010\002\ufffe\004\ufffe\055\ufffe\001\002\000" +
    "\004\002\115\001\002\000\010\002\000\004\007\055\012" +
    "\001\002\000\010\002\ufffc\004\ufffc\055\ufffc\001\002\000" +
    "\004\055\101\001\002\000\010\002\uffff\004\uffff\055\uffff" +
    "\001\002\000\010\002\ufffd\004\ufffd\055\ufffd\001\002\000" +
    "\006\005\013\006\015\001\002\000\020\013\024\051\022" +
    "\055\016\056\021\057\020\060\017\061\023\001\002\000" +
    "\004\007\073\001\002\000\020\013\024\051\022\055\016" +
    "\056\021\057\020\060\017\061\023\001\002\000\054\006" +
    "\015\007\uffd8\010\uffd8\011\uffd8\014\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\053\uffd8\054\uffd8\062\uffd8" +
    "\063\uffd8\001\002\000\052\007\uffdd\010\uffdd\011\uffdd\014" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\053" +
    "\uffdd\054\uffdd\062\uffdd\063\uffdd\001\002\000\052\007\uffdb" +
    "\010\uffdb\011\uffdb\014\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\047\uffdb\050\uffdb\053\uffdb\054\uffdb\062\uffdb\063\uffdb\001" +
    "\002\000\052\007\uffdc\010\uffdc\011\uffdc\014\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\053\uffdc\054\uffdc" +
    "\062\uffdc\063\uffdc\001\002\000\052\007\uffda\010\uffda\011" +
    "\uffda\014\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\053\uffda\054\uffda\062\uffda\063\uffda\001\002\000\052" +
    "\007\uffde\010\uffde\011\uffde\014\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\053\uffde\054\uffde\062\uffde\063" +
    "\uffde\001\002\000\020\013\024\051\022\055\016\056\021" +
    "\057\020\060\017\061\023\001\002\000\052\007\uffdf\010" +
    "\uffdf\011\uffdf\014\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\053\uffdf\054\uffdf\062\uffdf\063\uffdf\001\002" +
    "\000\006\007\uffd7\010\uffd7\001\002\000\020\007\uffef\010" +
    "\uffef\011\uffef\014\uffef\043\uffef\044\uffef\045\uffef\001\002" +
    "\000\052\007\uffe8\010\uffe8\011\uffe8\014\uffe8\035\052\036" +
    "\046\037\045\040\053\041\040\042\050\043\uffe8\044\uffe8" +
    "\045\uffe8\046\042\047\047\050\037\053\051\054\043\062" +
    "\041\063\044\001\002\000\016\007\ufff5\010\ufff5\011\ufff5" +
    "\043\033\044\034\045\032\001\002\000\020\007\ufff0\010" +
    "\ufff0\011\ufff0\014\ufff0\043\ufff0\044\ufff0\045\ufff0\001\002" +
    "\000\020\013\024\051\022\055\016\056\021\057\020\060" +
    "\017\061\023\001\002\000\020\013\024\051\022\055\016" +
    "\056\021\057\020\060\017\061\023\001\002\000\020\007" +
    "\ufff1\010\ufff1\011\ufff1\014\ufff1\043\033\044\ufff1\045\032" +
    "\001\002\000\020\007\ufff2\010\ufff2\011\ufff2\014\ufff2\043" +
    "\ufff2\044\ufff2\045\032\001\002\000\020\013\024\051\022" +
    "\055\016\056\021\057\020\060\017\061\023\001\002\000" +
    "\020\013\024\051\022\055\016\056\021\057\020\060\017" +
    "\061\023\001\002\000\020\013\024\051\022\055\016\056" +
    "\021\057\020\060\017\061\023\001\002\000\020\013\024" +
    "\051\022\055\016\056\021\057\020\060\017\061\023\001" +
    "\002\000\052\007\uffe1\010\uffe1\011\uffe1\014\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\053\uffe1\054\uffe1" +
    "\062\uffe1\063\uffe1\001\002\000\020\013\024\051\022\055" +
    "\016\056\021\057\020\060\017\061\023\001\002\000\020" +
    "\013\024\051\022\055\016\056\021\057\020\060\017\061" +
    "\023\001\002\000\020\013\024\051\022\055\016\056\021" +
    "\057\020\060\017\061\023\001\002\000\020\013\024\051" +
    "\022\055\016\056\021\057\020\060\017\061\023\001\002" +
    "\000\020\013\024\051\022\055\016\056\021\057\020\060" +
    "\017\061\023\001\002\000\052\007\uffe2\010\uffe2\011\uffe2" +
    "\014\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\053\uffe2\054\uffe2\062\uffe2\063\uffe2\001\002\000\020\013" +
    "\024\051\022\055\016\056\021\057\020\060\017\061\023" +
    "\001\002\000\020\013\024\051\022\055\016\056\021\057" +
    "\020\060\017\061\023\001\002\000\036\007\uffeb\010\uffeb" +
    "\011\uffeb\014\uffeb\043\uffeb\044\uffeb\045\uffeb\046\042\047" +
    "\047\050\037\053\051\054\043\062\041\063\044\001\002" +
    "\000\036\007\uffee\010\uffee\011\uffee\014\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\042\047\047\050\037\053\051\054\043" +
    "\062\041\063\044\001\002\000\036\007\uffe9\010\uffe9\011" +
    "\uffe9\014\uffe9\043\uffe9\044\uffe9\045\uffe9\046\042\047\047" +
    "\050\037\053\051\054\043\062\041\063\044\001\002\000" +
    "\052\007\uffe4\010\uffe4\011\uffe4\014\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\037\053\051\054\043\062\uffe4" +
    "\063\uffe4\001\002\000\036\007\uffed\010\uffed\011\uffed\014" +
    "\uffed\043\uffed\044\uffed\045\uffed\046\042\047\047\050\037" +
    "\053\051\054\043\062\041\063\044\001\002\000\036\007" +
    "\uffec\010\uffec\011\uffec\014\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\042\047\047\050\037\053\051\054\043\062\041\063" +
    "\044\001\002\000\052\007\uffe5\010\uffe5\011\uffe5\014\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\037\053\051" +
    "\054\043\062\uffe5\063\uffe5\001\002\000\052\007\uffe7\010" +
    "\uffe7\011\uffe7\014\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\047\050\037\053\051\054\043\062\uffe7\063\044\001\002" +
    "\000\052\007\uffe6\010\uffe6\011\uffe6\014\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\047\050\037\053\051\054\043\062" +
    "\uffe6\063\044\001\002\000\036\007\uffea\010\uffea\011\uffea" +
    "\014\uffea\043\uffea\044\uffea\045\uffea\046\042\047\047\050" +
    "\037\053\051\054\043\062\041\063\044\001\002\000\052" +
    "\007\uffe3\010\uffe3\011\uffe3\014\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\053\051\054\043\062\uffe3\063" +
    "\uffe3\001\002\000\012\014\070\043\033\044\034\045\032" +
    "\001\002\000\052\007\uffe0\010\uffe0\011\uffe0\014\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0\054" +
    "\uffe0\062\uffe0\063\uffe0\001\002\000\004\007\072\001\002" +
    "\000\052\007\uffd9\010\uffd9\011\uffd9\014\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\054\uffd9\062" +
    "\uffd9\063\uffd9\001\002\000\004\005\074\001\002\000\020" +
    "\013\024\051\022\055\016\056\021\057\020\060\017\061" +
    "\023\001\002\000\004\011\076\001\002\000\010\002\ufff3" +
    "\004\ufff3\055\ufff3\001\002\000\004\011\100\001\002\000" +
    "\010\002\ufff4\004\ufff4\055\ufff4\001\002\000\006\005\103" +
    "\011\102\001\002\000\010\002\ufff8\004\ufff8\055\ufff8\001" +
    "\002\000\022\006\015\013\024\051\022\055\016\056\021" +
    "\057\020\060\017\061\023\001\002\000\010\002\ufffb\004" +
    "\ufffb\055\ufffb\001\002\000\006\007\111\010\112\001\002" +
    "\000\006\007\ufff6\010\ufff6\001\002\000\004\011\110\001" +
    "\002\000\010\002\ufff9\004\ufff9\055\ufff9\001\002\000\004" +
    "\011\114\001\002\000\020\013\024\051\022\055\016\056" +
    "\021\057\020\060\017\061\023\001\002\000\006\007\ufff7" +
    "\010\ufff7\001\002\000\010\002\ufffa\004\ufffa\055\ufffa\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\010\005\007\006\010\016\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\013\001\001\000\014\003\076\010\024" +
    "\011\030\012\026\013\027\001\001\000\002\001\001\000" +
    "\014\003\025\010\024\011\030\012\026\013\027\001\001" +
    "\000\004\015\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\024\011\066\012\026\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\024\011\035\012\026\013\027\001\001\000\012\010\024" +
    "\011\034\012\026\013\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\024\013\065\001\001\000\006" +
    "\010\024\013\064\001\001\000\006\010\024\013\063\001" +
    "\001\000\006\010\024\013\062\001\001\000\002\001\001" +
    "\000\006\010\024\013\061\001\001\000\006\010\024\013" +
    "\060\001\001\000\006\010\024\013\057\001\001\000\006" +
    "\010\024\013\056\001\001\000\006\010\024\013\055\001" +
    "\001\000\002\001\001\000\006\010\024\013\054\001\001" +
    "\000\006\010\024\013\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\074\010\024" +
    "\011\030\012\026\013\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\103\001\001\000\002\001\001\000\020\003\106\010" +
    "\024\011\030\012\026\013\027\014\104\015\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\112\010\024\011\030\012\026\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_cjs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_cjs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_cjs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico_cjs$actions {




  private final AnalizadorSintactico_cjs parser;

  /** Constructor */
  CUP$AnalizadorSintactico_cjs$actions(AnalizadorSintactico_cjs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_cjs$do_action_part00000000(
    int                        CUP$AnalizadorSintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_cjs$parser,
    java.util.Stack            CUP$AnalizadorSintactico_cjs$stack,
    int                        CUP$AnalizadorSintactico_cjs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_cjs$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_cjs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_cjs$parser.done_parsing();
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= INICIO 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
        parser.padre = (Nodo) inc;
        System.out.println("DOCUMENTO OK"); 
    
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO CONTENIDO 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
            Nodo temp;
            temp = (Nodo) inc;
            temp.addHijo((Nodo)con);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;
		   Nodo tmp = new Nodo("INICIO");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
           
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDO ::= VARIABLE 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDO ::= VALOR 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VARIABLE ::= dimv id TIPO_VARIABLE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		  
                Nodo temp;
                temp = (Nodo) tv;
                String nombre = "DIMV_"+temp.getNombre();
                temp.setNombre(nombre);
                temp.setValor(i.toString());
                RESULT=temp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_VARIABLE ::= dpt VECTOR llf pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		 
                    RESULT = tmp;
                 
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO_VARIABLE ::= dpt E0 pyc 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                   Nodo tmp = new Nodo("ASIGNACION");
                   tmp.setNumNodo(parser.contador++); 
                   tmp.addHijo((Nodo)con);
                   RESULT=tmp; 
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_VARIABLE ::= pyc 
            {
              Object RESULT =null;
		
                   Nodo tmp = new Nodo("VARIABLE");
                   tmp.setNumNodo(parser.contador++); 
                   RESULT=tmp; 
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VECTOR ::= VECTOR coma E0 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp;
            temp = (Nodo) tmp;
            temp.addHijo((Nodo)e1);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VECTOR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VECTOR ::= AVECTOR 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            RESULT=tmp;
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VECTOR",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E0 ::= CONDICION 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
         RESULT=tmp;
     
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("E0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALOR ::= id dpt E0 pyc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
            Nodo tmp = new Nodo("VARIABLE");
            tmp.setNumNodo(parser.contador++); 
            tmp.setValor(i.toString());
            tmp.addHijo((Nodo)e1);
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALOR ::= id AVECTOR llf dpt E0 pyc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)).value;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                Nodo temp;
                temp = (Nodo) tmp;
                temp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VALOR",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("AND");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)c1);
                      tmp.addHijo((Nodo)c2);
                      RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("OR");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)c1);
                      tmp.addHijo((Nodo)c2);
                      RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONDICION ::= CONDICION not 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("NOT");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)c1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONDICION ::= RELACIONALES 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                    RESULT=r1;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RELACIONALES ::= EXPRESION igual EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("IGUAL");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RELACIONALES ::= EXPRESION diferente EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("DIFERENTE");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RELACIONALES ::= EXPRESION menorq EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MENORQ");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RELACIONALES ::= EXPRESION mayorq EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MAYORQ");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RELACIONALES ::= EXPRESION menory EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MENORY");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RELACIONALES ::= EXPRESION mayory EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MAYORY");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RELACIONALES ::= EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                        RESULT=e1;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("SUMA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("RESTA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= EXPRESION multiplicacion EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("MULTIPLICACION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("DIVISION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("POTENCIA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION adicion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("ADICION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION sustraccion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("SUSTRACCION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= pari CONDICION parf 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT = c1;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= TIPO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= datetime 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("DATATIME");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= date 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("DATE");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("CADENA");
            String str = i.toString();
            String ncadena=str.substring(1,str.length()-1);
            tmp.setValor(ncadena);
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("BOOl");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("NUMERO");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= id AVECTOR llf 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
            Nodo temp;
            temp = (Nodo) tmp;
            temp.setValor(i.toString());
            RESULT = tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("ID");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AVECTOR ::= lli E0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("VECTOR");
            tmp.setNumNodo(parser.contador++); 
            tmp.addHijo((Nodo)e1); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("AVECTOR",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico_cjs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_cjs$do_action(
    int                        CUP$AnalizadorSintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_cjs$parser,
    java.util.Stack            CUP$AnalizadorSintactico_cjs$stack,
    int                        CUP$AnalizadorSintactico_cjs$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico_cjs$do_action_part00000000(
                               CUP$AnalizadorSintactico_cjs$act_num,
                               CUP$AnalizadorSintactico_cjs$parser,
                               CUP$AnalizadorSintactico_cjs$stack,
                               CUP$AnalizadorSintactico_cjs$top);
    }
}

}
