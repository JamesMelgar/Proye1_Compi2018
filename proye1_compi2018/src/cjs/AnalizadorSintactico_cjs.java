
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package cjs;

import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico_cjs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico_cjs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico_cjs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_cjs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\006" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\007\006\000" +
    "\002\007\005\000\002\007\003\000\002\020\005\000\002" +
    "\020\003\000\002\003\003\000\002\022\006\000\002\022" +
    "\010\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\015\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\005\000\002\017\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\021\004\000\002\026\004\000\002" +
    "\026\007\000\002\025\004\000\002\025\004\000\002\023" +
    "\004\000\002\023\007\000\002\032\003\000\002\032\003" +
    "\000\002\030\004\000\002\030\005\000\002\031\004\000" +
    "\002\031\004\000\002\024\004\000\002\024\007\000\002" +
    "\033\011\000\002\034\003\000\002\034\003\000\002\035" +
    "\004\000\002\035\007\000\002\036\003\000\002\037\006" +
    "\000\002\011\004\000\002\011\007\000\002\040\004\000" +
    "\002\040\003\000\002\041\005\000\002\041\003\000\002" +
    "\012\004\000\002\013\005\000\002\043\004\000\002\043" +
    "\003\000\002\042\005\000\002\042\003\000\002\044\006" +
    "\000\002\045\004\000\002\045\004\000\002\047\007\000" +
    "\002\051\004\000\002\051\003\000\002\052\004\000\002" +
    "\046\011\000\002\027\003\000\002\027\004\000\002\050" +
    "\011\000\002\053\004\000\002\014\004\000\002\014\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\034\002\ufffe\004\ufffe\016\ufffe\020\ufffe\021" +
    "\ufffe\023\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\055\ufffe\001\002\000\004\002\336\001\002\000" +
    "\034\002\000\004\023\016\035\020\020\021\030\023\010" +
    "\025\007\026\013\027\031\030\012\031\037\032\024\055" +
    "\025\001\002\000\004\011\335\001\002\000\004\013\320" +
    "\001\002\000\004\013\314\001\002\000\010\007\301\024" +
    "\304\065\305\001\002\000\004\013\276\001\002\000\004" +
    "\013\272\001\002\000\004\011\271\001\002\000\004\011" +
    "\270\001\002\000\042\002\ufffd\004\ufffd\007\ufffd\016\ufffd" +
    "\020\ufffd\021\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\055\ufffd\065\ufffd\001\002" +
    "\000\034\004\023\007\266\016\035\020\020\021\030\023" +
    "\010\025\007\026\013\027\031\030\012\031\037\032\024" +
    "\055\025\001\002\000\004\013\263\001\002\000\004\011" +
    "\262\001\002\000\004\011\261\001\002\000\004\055\245" +
    "\001\002\000\022\013\070\021\030\051\067\055\060\056" +
    "\064\057\062\060\063\061\071\001\002\000\012\005\233" +
    "\006\145\012\235\013\142\001\002\000\004\011\231\001" +
    "\002\000\034\004\023\007\222\016\035\020\020\021\030" +
    "\023\010\025\007\026\013\027\031\030\012\031\037\032" +
    "\024\055\025\001\002\000\004\012\204\001\002\000\004" +
    "\011\uffaf\001\002\000\034\002\uffff\004\uffff\016\uffff\020" +
    "\uffff\021\uffff\023\uffff\025\uffff\026\uffff\027\uffff\030\uffff" +
    "\031\uffff\032\uffff\055\uffff\001\002\000\004\011\201\001" +
    "\002\000\034\004\023\007\177\016\035\020\020\021\030" +
    "\023\010\025\007\026\013\027\031\030\012\031\037\032" +
    "\024\055\025\001\002\000\004\013\057\001\002\000\042" +
    "\002\uffee\004\uffee\007\uffee\016\uffee\020\uffee\021\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\055\uffee\065\uffee\001\002\000\004\055\045\001" +
    "\002\000\034\004\023\007\043\016\035\020\020\021\030" +
    "\023\010\025\007\026\013\027\031\030\012\031\037\032" +
    "\024\055\025\001\002\000\004\011\042\001\002\000\042" +
    "\002\ufff2\004\ufff2\007\ufff2\016\ufff2\020\ufff2\021\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\055\ufff2\065\ufff2\001\002\000\042\002\ufff5\004" +
    "\ufff5\007\ufff5\016\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\055" +
    "\ufff5\065\ufff5\001\002\000\034\004\uffad\007\uffad\016\uffad" +
    "\020\uffad\021\uffad\023\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\055\uffad\001\002\000\004\013\046" +
    "\001\002\000\006\014\051\055\052\001\002\000\004\006" +
    "\056\001\002\000\006\010\053\014\054\001\002\000\004" +
    "\006\uffaa\001\002\000\006\010\uffa8\014\uffa8\001\002\000" +
    "\004\055\055\001\002\000\004\006\uffab\001\002\000\006" +
    "\010\uffa9\014\uffa9\001\002\000\034\004\uffac\007\uffac\016" +
    "\uffac\020\uffac\021\uffac\023\uffac\025\uffac\026\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\055\uffac\001\002\000\022\013" +
    "\070\021\030\051\067\055\060\056\064\057\062\060\063" +
    "\061\071\001\002\000\064\005\uffc4\006\145\007\uffc4\010" +
    "\uffc4\011\uffc4\012\146\013\142\014\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\062\uffc4\063\uffc4\001\002\000\056\005\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\014\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\052\uffc6\053\uffc6\054\uffc6\062\uffc6\063\uffc6" +
    "\001\002\000\056\005\uffcc\007\uffcc\010\uffcc\011\uffcc\014" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\062\uffcc\063\uffcc\001\002\000\056" +
    "\005\uffce\007\uffce\010\uffce\011\uffce\014\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\052\uffce\053\uffce\054" +
    "\uffce\062\uffce\063\uffce\001\002\000\056\005\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\014\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\047\uffcd\050\uffcd\052\uffcd\053\uffcd\054\uffcd\062\uffcd\063" +
    "\uffcd\001\002\000\056\005\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\014\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\062\uffc5\063\uffc5\001\002\000" +
    "\056\005\uffc7\007\uffc7\010\uffc7\011\uffc7\014\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\062\uffc7\063\uffc7\001\002\000\056\005\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\014\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\052\uffcb\053\uffcb\054\uffcb\062\uffcb" +
    "\063\uffcb\001\002\000\022\013\070\021\030\051\067\055" +
    "\060\056\064\057\062\060\063\061\071\001\002\000\056" +
    "\005\uffcf\007\uffcf\010\uffcf\011\uffcf\014\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\062\uffcf\063\uffcf\001\002\000\056\005\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\014\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\052\uffd0\053\uffd0\054\uffd0\062\uffd0\063" +
    "\uffd0\001\002\000\022\005\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\014\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002\000\056\005" +
    "\uffda\007\uffda\010\uffda\011\uffda\014\uffda\035\122\036\116" +
    "\037\114\040\123\041\110\042\117\043\uffda\044\uffda\045" +
    "\uffda\046\111\047\115\050\106\052\120\053\121\054\113" +
    "\062\107\063\112\001\002\000\004\014\104\001\002\000" +
    "\022\005\uffe7\007\uffe7\010\uffe7\011\uffe7\014\uffe7\043\100" +
    "\044\101\045\077\001\002\000\022\005\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\014\uffe2\043\uffe2\044\uffe2\045\uffe2\001\002" +
    "\000\022\013\070\021\030\051\067\055\060\056\064\057" +
    "\062\060\063\061\071\001\002\000\022\013\070\021\030" +
    "\051\067\055\060\056\064\057\062\060\063\061\071\001" +
    "\002\000\022\005\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3" +
    "\043\100\044\uffe3\045\077\001\002\000\022\005\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\014\uffe4\043\uffe4\044\uffe4\045\077" +
    "\001\002\000\004\006\105\001\002\000\034\004\uffc1\007" +
    "\uffc1\016\uffc1\020\uffc1\021\uffc1\023\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\032\uffc1\055\uffc1\001\002\000" +
    "\022\013\070\021\030\051\067\055\060\056\064\057\062" +
    "\060\063\061\071\001\002\000\022\013\070\021\030\051" +
    "\067\055\060\056\064\057\062\060\063\061\071\001\002" +
    "\000\022\013\070\021\030\051\067\055\060\056\064\057" +
    "\062\060\063\061\071\001\002\000\022\013\070\021\030" +
    "\051\067\055\060\056\064\057\062\060\063\061\071\001" +
    "\002\000\022\013\070\021\030\051\067\055\060\056\064" +
    "\057\062\060\063\061\071\001\002\000\056\005\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\014\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\062\uffd2" +
    "\063\uffd2\001\002\000\022\013\070\021\030\051\067\055" +
    "\060\056\064\057\062\060\063\061\071\001\002\000\022" +
    "\013\070\021\030\051\067\055\060\056\064\057\062\060" +
    "\063\061\071\001\002\000\022\013\070\021\030\051\067" +
    "\055\060\056\064\057\062\060\063\061\071\001\002\000" +
    "\022\013\070\021\030\051\067\055\060\056\064\057\062" +
    "\060\063\061\071\001\002\000\022\013\070\021\030\051" +
    "\067\055\060\056\064\057\062\060\063\061\071\001\002" +
    "\000\056\005\uffd3\007\uffd3\010\uffd3\011\uffd3\014\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\062\uffd3\063\uffd3\001\002\000\022\013\070" +
    "\021\030\051\067\055\060\056\064\057\062\060\063\061" +
    "\071\001\002\000\022\013\070\021\030\051\067\055\060" +
    "\056\064\057\062\060\063\061\071\001\002\000\042\005" +
    "\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\111\047\115\050\106\052\120\053\121\054" +
    "\113\062\107\063\112\001\002\000\042\005\uffe0\007\uffe0" +
    "\010\uffe0\011\uffe0\014\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\111\047\115\050\106\052\120\053\121\054\113\062\107" +
    "\063\112\001\002\000\056\005\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\014\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050" +
    "\106\052\uffd7\053\121\054\113\062\uffd7\063\uffd7\001\002" +
    "\000\042\005\uffdb\007\uffdb\010\uffdb\011\uffdb\014\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\111\047\115\050\106\052\120" +
    "\053\121\054\113\062\107\063\112\001\002\000\042\005" +
    "\uffdf\007\uffdf\010\uffdf\011\uffdf\014\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\111\047\115\050\106\052\120\053\121\054" +
    "\113\062\107\063\112\001\002\000\056\005\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\014\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\047\uffd5\050\106\052\uffd5\053\121\054\113\062\uffd5\063" +
    "\uffd5\001\002\000\042\005\uffde\007\uffde\010\uffde\011\uffde" +
    "\014\uffde\043\uffde\044\uffde\045\uffde\046\111\047\115\050" +
    "\106\052\120\053\121\054\113\062\107\063\112\001\002" +
    "\000\056\005\uffd6\007\uffd6\010\uffd6\011\uffd6\014\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\106\052\uffd6\053" +
    "\121\054\113\062\uffd6\063\uffd6\001\002\000\056\005\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\014\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\115\050\106\052\120\053\121\054\113\062" +
    "\uffd9\063\112\001\002\000\042\005\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\014\uffdc\043\uffdc\044\uffdc\045\uffdc\046\111\047" +
    "\115\050\106\052\120\053\121\054\113\062\107\063\112" +
    "\001\002\000\056\005\uffd8\007\uffd8\010\uffd8\011\uffd8\014" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\115\050\106\052" +
    "\120\053\121\054\113\062\uffd8\063\112\001\002\000\056" +
    "\005\uffd4\007\uffd4\010\uffd4\011\uffd4\014\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\053\121\054" +
    "\113\062\uffd4\063\uffd4\001\002\000\012\014\141\043\100" +
    "\044\101\045\077\001\002\000\056\005\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\014\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\052\uffd1\053\uffd1\054\uffd1\062\uffd1\063\uffd1" +
    "\001\002\000\024\013\070\014\173\021\030\051\067\055" +
    "\060\056\064\057\062\060\063\061\071\001\002\000\056" +
    "\005\uff9b\007\uff9b\010\uff9b\011\uff9b\014\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\062\uff9b\063\uff9b\001\002\000\004\007\167\001\002" +
    "\000\022\013\070\021\030\051\067\055\060\056\064\057" +
    "\062\060\063\061\071\001\002\000\010\015\150\034\147" +
    "\064\151\001\002\000\004\013\152\001\002\000\056\005" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\014\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\062\uffc8\063\uffc8\001\002\000\056\005\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\014\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\052\uffc9\053\uffc9\054\uffc9\062\uffc9\063\uffc9" +
    "\001\002\000\004\056\153\001\002\000\004\010\154\001" +
    "\002\000\006\055\160\066\155\001\002\000\004\006\165" +
    "\001\002\000\004\014\164\001\002\000\034\004\023\007" +
    "\162\016\035\020\020\021\030\023\010\025\007\026\013" +
    "\027\031\030\012\031\037\032\024\055\025\001\002\000" +
    "\004\013\142\001\002\000\004\014\uff99\001\002\000\004" +
    "\014\uff98\001\002\000\034\004\uff95\007\uff95\016\uff95\020" +
    "\uff95\021\uff95\023\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\055\uff95\001\002\000\056\005\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\014\uff9a\035\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\052\uff9a\053\uff9a\054\uff9a\062\uff9a" +
    "\063\uff9a\001\002\000\034\004\uff94\007\uff94\016\uff94\020" +
    "\uff94\021\uff94\023\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\055\uff94\001\002\000\006\007\uffc3\010" +
    "\uffc3\001\002\000\056\005\uffca\007\uffca\010\uffca\011\uffca" +
    "\014\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\052\uffca\053\uffca\054\uffca\062\uffca\063\uffca\001\002\000" +
    "\056\005\uffa6\007\uffa6\010\uffa6\011\uffa6\014\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\062\uffa6\063\uffa6\001\002\000\006\010\uffa2\014" +
    "\uffa2\001\002\000\006\010\174\014\175\001\002\000\056" +
    "\005\uffa4\007\uffa4\010\uffa4\011\uffa4\014\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\062\uffa4\063\uffa4\001\002\000\022\013\070\021\030" +
    "\051\067\055\060\056\064\057\062\060\063\061\071\001" +
    "\002\000\056\005\uffa5\007\uffa5\010\uffa5\011\uffa5\014\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\062\uffa5\063\uffa5\001\002\000\006\010" +
    "\uffa3\014\uffa3\001\002\000\042\002\ufff8\004\ufff8\007\ufff8" +
    "\016\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\055\ufff8\065\ufff8" +
    "\001\002\000\034\004\uffb1\007\uffb1\016\uffb1\020\uffb1\021" +
    "\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\055\uffb1\001\002\000\042\002\ufff7\004\ufff7\007" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\055\ufff7\065" +
    "\ufff7\001\002\000\056\005\uffa0\007\uffa0\010\uffa0\011\uffa0" +
    "\014\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\062\uffa0\063\uffa0\001\002\000" +
    "\056\005\uff9f\007\uff9f\010\uff9f\011\uff9f\014\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\062\uff9f\063\uff9f\001\002\000\006\022\205\034" +
    "\147\001\002\000\004\013\206\001\002\000\004\056\207" +
    "\001\002\000\004\014\210\001\002\000\060\005\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\213\014\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\062\uff9c\063\uff9c\001\002\000\056\005\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\014\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e\062\uff9e\063\uff9e" +
    "\001\002\000\056\005\uff9d\007\uff9d\010\uff9d\011\uff9d\014" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\062\uff9d\063\uff9d\001\002\000\004" +
    "\033\214\001\002\000\004\013\215\001\002\000\004\056" +
    "\216\001\002\000\004\010\217\001\002\000\004\056\220" +
    "\001\002\000\004\014\221\001\002\000\056\005\uff97\007" +
    "\uff97\010\uff97\011\uff97\014\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\052\uff97\053\uff97\054\uff97\062\uff97" +
    "\063\uff97\001\002\000\044\002\ufffb\004\ufffb\007\ufffb\016" +
    "\ufffb\017\224\020\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\055\ufffb\065" +
    "\ufffb\001\002\000\034\004\uffc2\007\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\023\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\055\uffc2\001\002\000\004\006\230\001\002" +
    "\000\034\004\023\007\226\016\035\020\020\021\030\023" +
    "\010\025\007\026\013\027\031\030\012\031\037\032\024" +
    "\055\025\001\002\000\042\002\ufffc\004\ufffc\007\ufffc\016" +
    "\ufffc\020\ufffc\021\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\055\ufffc\065\ufffc\001" +
    "\002\000\034\004\uffc0\007\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\023\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\055\uffc0\001\002\000\034\004\uffbf\007\uffbf\016\uffbf" +
    "\020\uffbf\021\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\055\uffbf\001\002\000\042\002\ufff4" +
    "\004\ufff4\007\ufff4\016\ufff4\020\ufff4\021\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\055\ufff4\065\ufff4\001\002\000\004\011\uff96\001\002\000" +
    "\022\013\070\021\030\051\067\055\060\056\064\057\062" +
    "\060\063\061\071\001\002\000\004\007\236\001\002\000" +
    "\006\033\214\034\147\001\002\000\004\005\237\001\002" +
    "\000\022\013\070\021\030\051\067\055\060\056\064\057" +
    "\062\060\063\061\071\001\002\000\004\011\241\001\002" +
    "\000\042\002\uffe5\004\uffe5\007\uffe5\016\uffe5\020\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\055\uffe5\065\uffe5\001\002\000\004\011" +
    "\243\001\002\000\042\002\uffe6\004\uffe6\007\uffe6\016\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\055\uffe6\065\uffe6\001\002" +
    "\000\004\011\uffa7\001\002\000\006\005\247\011\246\001" +
    "\002\000\042\002\uffea\004\uffea\007\uffea\016\uffea\020\uffea" +
    "\021\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\055\uffea\065\uffea\001\002\000\024" +
    "\006\145\013\070\021\030\051\067\055\060\056\064\057" +
    "\062\060\063\061\071\001\002\000\042\002\uffed\004\uffed" +
    "\007\uffed\016\uffed\020\uffed\021\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\055\uffed" +
    "\065\uffed\001\002\000\004\011\260\001\002\000\006\007" +
    "\254\010\255\001\002\000\006\007\uffe8\010\uffe8\001\002" +
    "\000\004\011\257\001\002\000\022\013\070\021\030\051" +
    "\067\055\060\056\064\057\062\060\063\061\071\001\002" +
    "\000\006\007\uffe9\010\uffe9\001\002\000\042\002\uffec\004" +
    "\uffec\007\uffec\016\uffec\020\uffec\021\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\055" +
    "\uffec\065\uffec\001\002\000\042\002\uffeb\004\uffeb\007\uffeb" +
    "\016\uffeb\020\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\055\uffeb\065\uffeb" +
    "\001\002\000\042\002\ufff0\004\ufff0\007\ufff0\016\ufff0\020" +
    "\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\055\ufff0\065\ufff0\001\002\000" +
    "\042\002\uffef\004\uffef\007\uffef\016\uffef\020\uffef\021\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\055\uffef\065\uffef\001\002\000\022\013\070" +
    "\021\030\051\067\055\060\056\064\057\062\060\063\061" +
    "\071\001\002\000\004\014\265\001\002\000\004\011\uffa1" +
    "\001\002\000\042\002\ufff9\004\ufff9\007\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\055\ufff9\065\ufff9\001\002\000" +
    "\034\004\uffb6\007\uffb6\016\uffb6\020\uffb6\021\uffb6\023\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\055" +
    "\uffb6\001\002\000\042\002\ufff6\004\ufff6\007\ufff6\016\ufff6" +
    "\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\055\ufff6\065\ufff6\001\002" +
    "\000\042\002\ufff1\004\ufff1\007\ufff1\016\ufff1\020\ufff1\021" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\055\ufff1\065\ufff1\001\002\000\022\013" +
    "\070\021\030\051\067\055\060\056\064\057\062\060\063" +
    "\061\071\001\002\000\004\014\274\001\002\000\004\006" +
    "\275\001\002\000\034\004\uffb0\007\uffb0\016\uffb0\020\uffb0" +
    "\021\uffb0\023\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\055\uffb0\001\002\000\022\013\070\021\030" +
    "\051\067\055\060\056\064\057\062\060\063\061\071\001" +
    "\002\000\004\014\300\001\002\000\004\011\uffae\001\002" +
    "\000\042\002\ufffa\004\ufffa\007\ufffa\016\ufffa\020\ufffa\021" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\055\ufffa\065\ufffa\001\002\000\010\007" +
    "\uffbe\024\uffbe\065\uffbe\001\002\000\040\004\023\007\uffbb" +
    "\016\035\020\020\021\030\023\010\024\uffbb\025\007\026" +
    "\013\027\031\030\012\031\037\032\024\055\025\065\uffbb" +
    "\001\002\000\022\013\070\021\030\051\067\055\060\056" +
    "\064\057\062\060\063\061\071\001\002\000\004\005\310" +
    "\001\002\000\040\004\023\007\uffbc\016\035\020\020\021" +
    "\030\023\010\024\uffbc\025\007\026\013\027\031\030\012" +
    "\031\037\032\024\055\025\065\uffbc\001\002\000\040\004" +
    "\uffba\007\uffba\016\uffba\020\uffba\021\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\055" +
    "\uffba\065\uffba\001\002\000\040\004\uffb7\007\uffb7\016\uffb7" +
    "\020\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\055\uffb7\065\uffb7\001\002" +
    "\000\004\005\312\001\002\000\040\004\uffb9\007\uffb9\016" +
    "\uffb9\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\055\uffb9\065\uffb9\001" +
    "\002\000\040\004\uffb8\007\uffb8\016\uffb8\020\uffb8\021\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\055\uffb8\065\uffb8\001\002\000\022\013\070" +
    "\021\030\051\067\055\060\056\064\057\062\060\063\061" +
    "\071\001\002\000\004\014\316\001\002\000\004\006\317" +
    "\001\002\000\010\007\uffbd\024\uffbd\065\uffbd\001\002\000" +
    "\004\055\322\001\002\000\004\014\333\001\002\000\004" +
    "\005\323\001\002\000\022\013\070\021\030\051\067\055" +
    "\060\056\064\057\062\060\063\061\071\001\002\000\004" +
    "\011\325\001\002\000\022\013\070\021\030\051\067\055" +
    "\060\056\064\057\062\060\063\061\071\001\002\000\004" +
    "\011\327\001\002\000\006\053\330\054\332\001\002\000" +
    "\004\014\uffb2\001\002\000\004\014\uffb4\001\002\000\004" +
    "\014\uffb3\001\002\000\004\006\334\001\002\000\034\004" +
    "\uffb5\007\uffb5\016\uffb5\020\uffb5\021\uffb5\023\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\055\uffb5\001" +
    "\002\000\042\002\ufff3\004\ufff3\007\ufff3\016\ufff3\020\ufff3" +
    "\021\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\055\ufff3\065\ufff3\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\042\005\031\006\015\011\037\012\025\013\005" +
    "\022\035\023\010\024\016\026\026\035\033\036\032\037" +
    "\014\044\040\045\021\052\013\053\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\305\031\302\032\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\266\006\015\011\037\012\025\013\005" +
    "\022\035\023\010\024\016\026\026\035\033\036\032\037" +
    "\014\044\040\045\021\052\013\053\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\243\010\071\013\065\015\075\016\072" +
    "\017\073\045\060\052\064\001\001\000\010\021\233\046" +
    "\142\050\231\001\001\000\002\001\001\000\042\005\222" +
    "\006\015\011\037\012\025\013\005\022\035\023\010\024" +
    "\016\026\026\035\033\036\032\037\014\044\040\045\021" +
    "\052\013\053\020\001\001\000\006\046\202\047\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\177\006\015\011\037\012\025\013\005\022" +
    "\035\023\010\024\016\026\026\035\033\036\032\037\014" +
    "\044\040\045\021\052\013\053\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\043" +
    "\006\015\011\037\012\025\013\005\022\035\023\010\024" +
    "\016\026\026\035\033\036\032\037\014\044\040\045\021" +
    "\052\013\053\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\046\041\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\074\010\071\013\065\015\075\016\072" +
    "\017\073\045\060\052\064\001\001\000\006\021\143\046" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\071\013\065\015\137" +
    "\016\072\017\073\045\060\052\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\071\013\065\015\102\016\072\017\073\045\060" +
    "\052\064\001\001\000\020\010\071\013\065\015\101\016" +
    "\072\017\073\045\060\052\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\071\013\065\017\136\045\060\052\064\001\001" +
    "\000\014\010\071\013\065\017\135\045\060\052\064\001" +
    "\001\000\014\010\071\013\065\017\134\045\060\052\064" +
    "\001\001\000\014\010\071\013\065\017\133\045\060\052" +
    "\064\001\001\000\014\010\071\013\065\017\132\045\060" +
    "\052\064\001\001\000\002\001\001\000\014\010\071\013" +
    "\065\017\131\045\060\052\064\001\001\000\014\010\071" +
    "\013\065\017\130\045\060\052\064\001\001\000\014\010" +
    "\071\013\065\017\127\045\060\052\064\001\001\000\014" +
    "\010\071\013\065\017\126\045\060\052\064\001\001\000" +
    "\014\010\071\013\065\017\125\045\060\052\064\001\001" +
    "\000\002\001\001\000\014\010\071\013\065\017\124\045" +
    "\060\052\064\001\001\000\014\010\071\013\065\017\123" +
    "\045\060\052\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\170\010\071\013\065\015\075\016\072\017\073\042\171" +
    "\043\167\045\060\052\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\165\010\071\013\065\015\075" +
    "\016\072\017\073\045\060\052\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\160\014" +
    "\156\027\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\005\162\006\015\011\037\012\025\013\005\022" +
    "\035\023\010\024\016\026\026\035\033\036\032\037\014" +
    "\044\040\045\021\052\013\053\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\175\010\071\013" +
    "\065\015\075\016\072\017\073\045\060\052\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\210\001\001\000\004\050\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\226\006\015\011\037\012\025\013\005\022\035\023" +
    "\010\024\016\026\026\035\033\036\032\037\014\044\040" +
    "\045\021\052\013\053\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\241\010\071\013\065\015\075\016" +
    "\072\017\073\045\060\052\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\237\010" +
    "\071\013\065\015\075\016\072\017\073\045\060\052\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\247" +
    "\001\001\000\002\001\001\000\026\003\250\010\071\013" +
    "\065\015\075\016\072\017\073\020\251\021\252\045\060" +
    "\052\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\255\010\071\013\065\015\075\016\072\017\073\045" +
    "\060\052\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\263\010\071\013\065\015\075\016\072\017\073" +
    "\045\060\052\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\272\010\071\013\065\015" +
    "\075\016\072\017\073\045\060\052\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\276\010\071\013\065\015\075\016\072\017\073\045\060" +
    "\052\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\312\006\015" +
    "\011\037\012\025\013\005\022\035\023\010\024\016\026" +
    "\026\035\033\036\032\037\014\044\040\045\021\052\013" +
    "\053\020\001\001\000\022\003\310\010\071\013\065\015" +
    "\075\016\072\017\073\045\060\052\064\001\001\000\002" +
    "\001\001\000\042\005\306\006\015\011\037\012\025\013" +
    "\005\022\035\023\010\024\016\026\026\035\033\036\032" +
    "\037\014\044\040\045\021\052\013\053\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\314\010\071\013" +
    "\065\015\075\016\072\017\073\045\060\052\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\323\010\071\013\065\015\075\016\072\017" +
    "\073\045\060\052\064\001\001\000\002\001\001\000\022" +
    "\003\325\010\071\013\065\015\075\016\072\017\073\045" +
    "\060\052\064\001\001\000\002\001\001\000\004\034\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_cjs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_cjs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_cjs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico_cjs$actions {




  private final AnalizadorSintactico_cjs parser;

  /** Constructor */
  CUP$AnalizadorSintactico_cjs$actions(AnalizadorSintactico_cjs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_cjs$do_action_part00000000(
    int                        CUP$AnalizadorSintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_cjs$parser,
    java.util.Stack            CUP$AnalizadorSintactico_cjs$stack,
    int                        CUP$AnalizadorSintactico_cjs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_cjs$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_cjs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_cjs$parser.done_parsing();
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= INICIO 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
        parser.padre = (Nodo) inc;
        System.out.println("DOCUMENTO OK"); 
    
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO CONTENIDO 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
            Nodo temp;
            temp = (Nodo) inc;
            temp.addHijo((Nodo)con);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;
		   Nodo tmp = new Nodo("INICIO");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
           
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDO ::= VARIABLE 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONTENIDO ::= SI llf SINO llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).value;
		int hsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int hsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object hs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    Nodo temp = (Nodo)tmp;
                    temp.addHijo((Nodo)hs);
                    RESULT=temp;
              
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= SI llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= SELECCIONA llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= PARA llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= MIENTRAS llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= DETENER pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= IMPRIMIR pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= FUNCION llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= RETORNAR pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= LLAMADA pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= MENSAJE pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= ID_OBS pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO ::= DOCUMENTO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO ::= SETELEMENTO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO ::= VALOR 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE ::= dimv id TIPO_VARIABLE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		  
                Nodo temp;
                temp = (Nodo) tv;
                String nombre = "DIMV_"+temp.getNombre();
                temp.setNombre(nombre);
                temp.setValor(i.toString());
                RESULT=temp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VARIABLE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_VARIABLE ::= dpt VECTOR llf pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		 
                    RESULT = tmp;
                 
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_VARIABLE ::= dpt E0 pyc 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                   Nodo tmp = new Nodo("ASIGNACION");
                   tmp.setNumNodo(parser.contador++); 
                   tmp.addHijo((Nodo)con);
                   RESULT=tmp; 
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_VARIABLE ::= pyc 
            {
              Object RESULT =null;
		
                   Nodo tmp = new Nodo("VARIABLE");
                   tmp.setNumNodo(parser.contador++); 
                   RESULT=tmp; 
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO_VARIABLE",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VECTOR ::= VECTOR coma E0 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp;
            temp = (Nodo) tmp;
            temp.addHijo((Nodo)e1);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VECTOR",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VECTOR ::= AVECTOR 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            RESULT=tmp;
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VECTOR",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E0 ::= CONDICION 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
         RESULT=tmp;
     
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("E0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= id dpt E0 pyc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
            Nodo tmp = new Nodo("VARIABLE");
            tmp.setNumNodo(parser.contador++); 
            tmp.setValor(i.toString());
            tmp.addHijo((Nodo)e1);
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VALOR",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= id AVECTOR llf dpt E0 pyc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)).value;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                Nodo temp;
                temp = (Nodo) tmp;
                temp.setValor(i.toString());
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("VALOR",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("AND");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)c1);
                      tmp.addHijo((Nodo)c2);
                      RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("OR");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)c1);
                      tmp.addHijo((Nodo)c2);
                      RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDICION ::= CONDICION not 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("NOT");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)c1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= RELACIONALES 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                    RESULT=r1;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONDICION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RELACIONALES ::= EXPRESION igual EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("IGUAL");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RELACIONALES ::= EXPRESION diferente EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("DIFERENTE");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RELACIONALES ::= EXPRESION menorq EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MENORQ");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RELACIONALES ::= EXPRESION mayorq EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MAYORQ");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RELACIONALES ::= EXPRESION menory EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MENORY");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RELACIONALES ::= EXPRESION mayory EXPRESION 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object r1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                      Nodo tmp = new Nodo("MAYORY");
                      tmp.setNumNodo(parser.contador++); 
                      tmp.addHijo((Nodo)r1);
                      tmp.addHijo((Nodo)r2);
                      RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RELACIONALES ::= EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                        RESULT=e1;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RELACIONALES",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("SUMA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("RESTA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION modulo EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("MODULO");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION multiplicacion EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("MULTIPLICACION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("DIVISION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION potencia EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
                Nodo tmp = new Nodo("POTENCIA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION adicion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("ADICION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION sustraccion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("SUSTRACCION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= pari CONDICION parf 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                RESULT = c1;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= TIPO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("EXPRESION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TIPO ::= datetime 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("DATATIME");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPO ::= date 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("DATE");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPO ::= cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("CADENA");
            String str = i.toString();
            String ncadena=str.substring(1,str.length()-1);
            tmp.setValor(ncadena);
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO ::= bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("BOOl");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO ::= numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("NUMERO");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO ::= id AVECTOR llf 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
            Nodo temp;
            temp = (Nodo) tmp;
            temp.setValor(i.toString());
            RESULT = tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO ::= id pt conteo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		
            Nodo tmp = new Nodo("CONTEO");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TIPO ::= id pt atexto 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		
            Nodo tmp = new Nodo("ATEXTO");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO ::= LLAMADA 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= DOCUMENTO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= ID_OBS 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("ID");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AVECTOR ::= lli E0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("VECTOR");
            tmp.setNumNodo(parser.contador++); 
            tmp.addHijo((Nodo)e1); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("AVECTOR",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SI ::= SI CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp;
            temp = (Nodo) tmp;
            temp.addHijo((Nodo)con);
            RESULT = temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SI",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SI ::= si pari E0 parf lli 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		 
          Nodo tmp = new Nodo("SI");
          tmp.setNumNodo(parser.contador++); 
          tmp.addHijo((Nodo)e1); 
          RESULT=tmp;
       
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SI",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SINO ::= SINO CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp;
            temp = (Nodo) tmp;
            temp.addHijo((Nodo)con);
            RESULT = temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SINO",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SINO ::= sino lli 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("SINO");
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
       
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SINO",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SELECCIONA ::= SELECCIONA CONSELECCIONA 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                    Nodo temp = (Nodo)tmp;
                    temp.addHijo((Nodo)con);
                    RESULT=temp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SELECCIONA ::= selecciona pari E0 parf lli 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		 
                    Nodo tmp = new Nodo("SELECCIONA");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)e1);
                    RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SELECCIONA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONSELECCIONA ::= CASO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                    RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONSELECCIONA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONSELECCIONA ::= DEFECTO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                    RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONSELECCIONA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASO ::= CASO CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp = (Nodo)tmp;
            temp.addHijo((Nodo)con);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CASO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASO ::= caso E0 dpt 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
            Nodo tmp = new Nodo("CASO");
            tmp.setNumNodo(parser.contador++); 
            tmp.addHijo((Nodo)e1);
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CASO",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEFECTO ::= DEFECTO CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp = (Nodo)tmp;
            temp.addHijo((Nodo)con);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("DEFECTO",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DEFECTO ::= defecto dpt 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("DEFECTO");
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("DEFECTO",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARA ::= PARA CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp = (Nodo)tmp;
            temp.addHijo((Nodo)con);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARA",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PARA ::= para pari CONPARA parf lli 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		 
            Nodo tmp = new Nodo("PARA");
            tmp.addHijo((Nodo)con);
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARA",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONPARA ::= id dpt E0 pyc E0 pyc INCDEC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		
            Nodo tmp = new Nodo("CONTENIDO");
            tmp.setNumNodo(parser.contador++); 
            tmp.addHijo((Nodo)e1);
            tmp.addHijo((Nodo)e2);
            tmp.addHijo((Nodo)inc);
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CONPARA",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INCDEC ::= sustraccion 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("SUSTRACCION");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("INCDEC",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INCDEC ::= adicion 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("ADICION");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("INCDEC",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MIENTRAS ::= MIENTRAS CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo temp = (Nodo)tmp;
            temp.addHijo((Nodo)con);
            RESULT=temp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("MIENTRAS",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MIENTRAS ::= mientras pari E0 parf lli 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		
            Nodo tmp = new Nodo("MIENTRAS");
            tmp.setNumNodo(parser.contador++); 
            tmp.addHijo((Nodo)e1);
            RESULT=tmp;
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("MIENTRAS",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DETENER ::= detener 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("DETENER");
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("DETENER",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IMPRIMIR ::= imprimir pari E0 parf 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
                Nodo tmp = new Nodo("IMPRIMIR");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FUNCION ::= FUNCION CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo temp = (Nodo)tmp;
                temp.addHijo((Nodo)con);
                RESULT=temp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FUNCION ::= funcion id pari PARAMETRO lli 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                Nodo tmp = new Nodo("FUNCION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("FUNCION",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMETRO ::= PARAMETROS parf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                 RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMETRO ::= parf 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("PARAMETROS");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARAMETRO",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PARAMETROS ::= PARAMETROS coma id 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo temp = (Nodo) tmp;
                Nodo tmps = new Nodo("PARAMETRO");
                tmps.setNombre(i.toString());
                tmps.setNumNodo(parser.contador++);
                temp.addHijo(tmps);
                RESULT = temp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PARAMETROS ::= id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo tmp = new Nodo("PARAMETROS");
                Nodo tmps = new Nodo("PARAMETRO");
                tmp.setNumNodo(parser.contador++);
                tmps.setNumNodo(parser.contador++);
                tmps.setNombre(i.toString());
                tmp.addHijo(tmps); 
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("PARAMETROS",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RETORNAR ::= retornar E0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo tmp = new Nodo("RETORNAR");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("RETORNAR",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAMADA ::= id pari LLPARAMETRO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo tmp = new Nodo("LLAMADA");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(i.toString());
                tmp.addHijo((Nodo)con);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("LLAMADA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLPARAMETRO ::= LLPARAMETROS parf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                    RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("LLPARAMETRO",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLPARAMETRO ::= parf 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("PARAMETROS");
                    tmp.setNumNodo(parser.contador++); 
                    RESULT=tmp;
                 
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("LLPARAMETRO",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LLPARAMETROS ::= LLPARAMETROS coma E0 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                    Nodo temp = (Nodo)tmp;
                    temp.addHijo((Nodo)e1);
                    RESULT=temp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("LLPARAMETROS",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLPARAMETROS ::= E0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("PARAMETROS");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)e1); 
                    RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("LLPARAMETROS",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MENSAJE ::= mensaje pari E0 parf 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		
            Nodo tmp = new Nodo("MENSAJE");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)e1); 
            RESULT=tmp;
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("MENSAJE",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DOCUMENTO ::= documento OBTENER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                 Nodo tmp = new Nodo("DOCUMENTO");
                 tmp.setNumNodo(parser.contador++);
                 tmp.addHijo((Nodo)e1); 
                 RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DOCUMENTO ::= documento OBSERVADOR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("DOCUMENTO");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)e1); 
                    RESULT=tmp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OBTENER ::= pt obtener pari cadena OBSET 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = (Nodo)con;    
            String str = i.toString();
            String ncadena=str.substring(1,str.length()-1);
            tmp.setValor(ncadena);
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("OBTENER",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OBSET ::= parf SETELEM 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            Nodo tmp = new Nodo("OBTENER");
            tmp.setNumNodo(parser.contador++);
            tmp.addHijo((Nodo)con);
            RESULT=tmp; 
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("OBSET",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OBSET ::= parf 
            {
              Object RESULT =null;
		 
            Nodo tmp = new Nodo("OBTENER");
            tmp.setNumNodo(parser.contador++);
            RESULT=tmp; 
         
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("OBSET",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ID_OBS ::= id OBSERVADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo tmp = new Nodo("ID_OBS");
                tmp.setNumNodo(parser.contador++);
                tmp.setValor(i.toString());
                tmp.addHijo((Nodo)con);
                RESULT=tmp;
          
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("ID_OBS",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OBSERVADOR ::= pt observador pari cadena coma CUAL parf 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                Nodo tmp = new Nodo("OBSERVADOR");
                tmp.setNumNodo(parser.contador++);
                String str = i.toString();
                String ncadena=str.substring(1,str.length()-1);
                tmp.setValor(ncadena);
                tmp.addHijo((Nodo)con);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("OBSERVADOR",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUAL ::= LLAMADA 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CUAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUAL ::= NEWFUNCION llf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("CUAL",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SETELEM ::= pt setelemento pari cadena coma cadena parf 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		 
                Nodo tmp = new Nodo("SET_ELEM");
                tmp.setNumNodo(parser.contador++);
                String str1 = i1.toString();
                String str2 = i2.toString();
                String ncadena1=str1.substring(1,str1.length()-1);
                String ncadena2=str2.substring(1,str2.length()-1);
                Nodo vat = new Nodo(ncadena1);
                vat.setValor(ncadena2);
                tmp.addHijo((Nodo)vat);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SETELEM",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SETELEMENTO ::= id SETELEM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                Nodo temp = (Nodo)con;
                temp.setValor(i.toString());
                RESULT=temp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("SETELEMENTO",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NEWFUNCION ::= NEWFUNCION CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_cjs$stack.peek()).value;
		 
                   Nodo temp;
                   temp = (Nodo) tmp;
                   temp.addHijo((Nodo)con);
                   RESULT = temp;
                
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("NEWFUNCION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NEWFUNCION ::= newfuncion lli 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("NEWFUNCION");
                    tmp.setNumNodo(parser.contador++);
                    RESULT = tmp;
               
              CUP$AnalizadorSintactico_cjs$result = parser.getSymbolFactory().newSymbol("NEWFUNCION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.elementAt(CUP$AnalizadorSintactico_cjs$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_cjs$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_cjs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico_cjs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_cjs$do_action(
    int                        CUP$AnalizadorSintactico_cjs$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_cjs$parser,
    java.util.Stack            CUP$AnalizadorSintactico_cjs$stack,
    int                        CUP$AnalizadorSintactico_cjs$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico_cjs$do_action_part00000000(
                               CUP$AnalizadorSintactico_cjs$act_num,
                               CUP$AnalizadorSintactico_cjs$parser,
                               CUP$AnalizadorSintactico_cjs$stack,
                               CUP$AnalizadorSintactico_cjs$top);
    }
}

}
