package chtml;
import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;

parser code
{:
	public String resultado="";
	public Nodo padre;
	public int contador = 1;
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }
:}

action code
{:

:}

terminal mas, menos, por, div, puntoycoma, coma, igual;
terminal String int_, double_, string_, char_;
terminal String numero, tstring, tchar, id;

non terminal INICIO;

non terminal EXP, E, SENTENCIAS, SENTENCIA, TIPO, IDS, ID, VALOR;

precedence left mas, menos;
precedence left por, div;

start with INICIO;

INICIO::= SENTENCIAS:sts {: 
		Nodo tmp = new Nodo("INICIO");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) sts);
		parser.padre = (Nodo) tmp;
		System.out.println("DOCUMENTO OK"); 
		RESULT=tmp;

:};

SENTENCIAS::= SENTENCIAS:s1 SENTENCIA:s2 {:
		Nodo tmp = new Nodo("SENTENCIAS");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) s1);
		tmp.addHijo((Nodo) s2);
		RESULT=tmp;
:}
			| SENTENCIA:s {:
		RESULT=s;		
:};

SENTENCIA::= TIPO:t IDS:ids puntoycoma {:
		Nodo tmp = new Nodo("SENTENCIA");
		tmp.addHijo((Nodo) t);
		tmp.addHijo((Nodo) ids);
		Nodo n3 = new Nodo("puntoycoma");
		n3.setValor(";");
		n3.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n3);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;
:};

IDS::= IDS:is coma ID:i {:
		Nodo tmp = new Nodo("IDS");
		tmp.addHijo((Nodo) is);
		Nodo n3 = new Nodo("coma");
		n3.setValor(",");
		n3.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n3);
		tmp.addHijo((Nodo) i);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;
:}
	| ID:di {:
		RESULT=di;
:};

ID::= id:i {:
		Nodo tmp = new Nodo("ID");
		Nodo n1 = new Nodo("id");
		n1.setNumNodo(parser.contador++);
		n1.setValor(i.toString());
		tmp.addHijo((Nodo) n1);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;
:}
	| id:i igual VALOR:v {:
		Nodo tmp = new Nodo("ID");
		
		Nodo n1 = new Nodo("id");
		n1.setNumNodo(parser.contador++);
		n1.setValor(i.toString());
		Nodo n2 = new Nodo("igual");
		n2.setNumNodo(parser.contador++);
		n2.setValor("=");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		tmp.addHijo((Nodo) n2);
		tmp.addHijo((Nodo) v);
		RESULT=tmp;
:};

TIPO::= int_ {:
		Nodo tmp = new Nodo("TIPO");
		Nodo n1 = new Nodo("int");
		n1.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;
:}
		| double_{:
		Nodo tmp = new Nodo("TIPO");
		Nodo n1 = new Nodo("double");
		n1.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;
:}
		| string_ {:
		Nodo tmp = new Nodo("TIPO");
		Nodo n1 = new Nodo("string");
		n1.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;
:}
		| char_ {:
		Nodo tmp = new Nodo("TIPO");
		Nodo n1 = new Nodo("char");
		n1.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		tmp.setNumNodo(parser.contador++);
		RESULT=tmp;

:};

VALOR::= EXP:exp {:
		Nodo tmp = new Nodo("VALOR");
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) exp);
		RESULT=tmp;
:}
		|tstring:str {:
		Nodo tmp = new Nodo("VALOR");
		Nodo n1 = new Nodo("tstring");
		n1.setNumNodo(parser.contador++);
		n1.setValor(str.toString().replaceAll("\"", ""));
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		RESULT=tmp;
:}
		|tchar:tchar {:
		Nodo tmp = new Nodo("VALOR");
		Nodo n1 = new Nodo("tchar");
		n1.setNumNodo(parser.contador++);
		n1.setValor(tchar.toString());
		tmp.setNumNodo(parser.contador++);
		tmp.addHijo((Nodo) n1);
		RESULT=tmp;
:};
		
EXP::=E:e{:
	Nodo tmp = new Nodo("EXP");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)e);
    RESULT=tmp;
:};

E::= E:a mas E:b{:
	Nodo tmp = new Nodo("+");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
	tmp.addHijo((Nodo)b);
    RESULT=tmp;
:}
|E:a menos E:b{:
	Nodo tmp = new Nodo("-");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
	tmp.addHijo((Nodo)b);
    RESULT=tmp;
:}
|E:a por E:b{:
	Nodo tmp = new Nodo("*");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
	tmp.addHijo((Nodo)b);
    RESULT=tmp;
:}
|E:a div E:b{:
	Nodo tmp = new Nodo("/");
    tmp.setNumNodo(parser.contador++);
    tmp.addHijo((Nodo)a);
	tmp.addHijo((Nodo)b);
    RESULT=tmp;
:}
|numero:a {: 
    Nodo tmp = new Nodo("numero");
    tmp.setNumNodo(parser.contador++);
    tmp.setValor(a.toString());
    RESULT=tmp;
:};



