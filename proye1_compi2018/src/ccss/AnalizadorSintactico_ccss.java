
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package ccss;

import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico_ccss extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico_ccss() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico_ccss(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_ccss(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\002\000\002\004\004\000\002\004\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\007\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\016\005\000\002\007\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\005\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\005\000\002" +
    "\013\005\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\017\005" +
    "\000\002\020\005\000\002\021\005\000\002\022\011\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\025\013\000\002\026\005\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\ufffe\045\ufffe\001\002\000\004\002" +
    "\165\001\002\000\006\002\000\045\007\001\002\000\010" +
    "\017\012\024\014\025\013\001\002\000\004\016\010\001" +
    "\002\000\010\017\ufffc\024\ufffc\025\ufffc\001\002\000\036" +
    "\010\026\011\042\012\032\013\044\015\037\017\ufffd\020" +
    "\027\021\053\022\033\023\025\024\ufffd\025\ufffd\036\041" +
    "\044\035\001\002\000\006\002\uffff\045\uffff\001\002\000" +
    "\004\030\021\001\002\000\004\030\015\001\002\000\004" +
    "\045\016\001\002\000\004\031\017\001\002\000\004\014" +
    "\020\001\002\000\036\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\015\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\036\ufffa\044\ufffa\001\002\000\004\045\022" +
    "\001\002\000\004\031\023\001\002\000\004\014\024\001" +
    "\002\000\036\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9" +
    "\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\036\ufff9\044\ufff9\001\002\000\004\026\163\001\002" +
    "\000\004\026\140\001\002\000\004\026\136\001\002\000" +
    "\004\014\135\001\002\000\004\014\134\001\002\000\004" +
    "\026\132\001\002\000\004\026\130\001\002\000\004\014" +
    "\127\001\002\000\004\026\125\001\002\000\006\014\115" +
    "\027\116\001\002\000\004\026\105\001\002\000\004\014" +
    "\104\001\002\000\004\026\076\001\002\000\004\026\074" +
    "\001\002\000\004\014\073\001\002\000\004\026\071\001" +
    "\002\000\004\014\070\001\002\000\004\014\067\001\002" +
    "\000\004\014\066\001\002\000\004\014\065\001\002\000" +
    "\004\014\064\001\002\000\036\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\015\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\036\ufffb\044\ufffb\001\002\000\004" +
    "\026\054\001\002\000\004\016\055\001\002\000\004\050" +
    "\056\001\002\000\004\027\057\001\002\000\004\046\060" +
    "\001\002\000\004\027\061\001\002\000\004\047\062\001" +
    "\002\000\004\017\063\001\002\000\004\014\uffce\001\002" +
    "\000\036\010\ufff0\011\ufff0\012\ufff0\013\ufff0\015\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\036\ufff0\044\ufff0\001\002\000\036\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\036\ufff5\044\ufff5\001\002\000" +
    "\036\010\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\036" +
    "\ufff2\044\ufff2\001\002\000\036\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\036\ufff8\044\ufff8\001\002\000\036" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\036\uffee" +
    "\044\uffee\001\002\000\004\046\072\001\002\000\004\014" +
    "\uffd3\001\002\000\036\010\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\015\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\036\ufff3\044\ufff3\001\002\000\004\046\075" +
    "\001\002\000\004\014\uffd5\001\002\000\012\032\100\033" +
    "\077\034\103\035\102\001\002\000\004\014\uffdf\001\002" +
    "\000\004\014\uffe0\001\002\000\004\014\uffe1\001\002\000" +
    "\004\014\uffdd\001\002\000\004\014\uffde\001\002\000\036" +
    "\010\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\036\ufff1" +
    "\044\ufff1\001\002\000\004\016\106\001\002\000\004\047" +
    "\107\001\002\000\004\027\110\001\002\000\006\051\111" +
    "\052\112\001\002\000\004\017\uffd1\001\002\000\004\017" +
    "\uffd0\001\002\000\004\017\114\001\002\000\004\014\uffd2" +
    "\001\002\000\036\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\036\ufff7\044\ufff7\001\002\000\014\037\117\040" +
    "\120\041\123\042\121\043\124\001\002\000\006\014\uffda" +
    "\027\uffda\001\002\000\006\014\uffd9\027\uffd9\001\002\000" +
    "\006\014\uffd7\027\uffd7\001\002\000\006\014\uffdc\027\uffdc" +
    "\001\002\000\006\014\uffd8\027\uffd8\001\002\000\006\014" +
    "\uffd6\027\uffd6\001\002\000\014\037\117\040\120\041\123" +
    "\042\121\043\124\001\002\000\006\014\uffdb\027\uffdb\001" +
    "\002\000\036\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\036\ufff4\044\ufff4\001\002\000\004\047\131\001\002" +
    "\000\004\014\uffcd\001\002\000\004\050\133\001\002\000" +
    "\004\014\uffd4\001\002\000\036\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\015\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\025\uffef\036\uffef\044\uffef\001\002\000\036" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6\017\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\036\ufff6" +
    "\044\ufff6\001\002\000\004\047\137\001\002\000\004\014" +
    "\uffcf\001\002\000\014\030\145\045\150\046\144\047\143" +
    "\050\142\001\002\000\004\014\uffed\001\002\000\016\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\014\uffe3\031\uffe3\001\002" +
    "\000\016\004\uffe4\005\uffe4\006\uffe4\007\uffe4\014\uffe4\031" +
    "\uffe4\001\002\000\016\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\014\uffe5\031\uffe5\001\002\000\014\030\145\045\150\046" +
    "\144\047\143\050\142\001\002\000\014\004\151\005\152" +
    "\006\153\007\154\014\uffec\001\002\000\016\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\014\uffe6\031\uffe6\001\002\000\016" +
    "\004\uffe2\005\uffe2\006\uffe2\007\uffe2\014\uffe2\031\uffe2\001" +
    "\002\000\014\030\145\045\150\046\144\047\143\050\142" +
    "\001\002\000\014\030\145\045\150\046\144\047\143\050" +
    "\142\001\002\000\014\030\145\045\150\046\144\047\143" +
    "\050\142\001\002\000\014\030\145\045\150\046\144\047" +
    "\143\050\142\001\002\000\016\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\014\uffe8\031\uffe8\001\002\000\016\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\014\uffe9\031\uffe9\001\002\000\016" +
    "\004\uffea\005\uffea\006\153\007\154\014\uffea\031\uffea\001" +
    "\002\000\016\004\uffeb\005\uffeb\006\153\007\154\014\uffeb" +
    "\031\uffeb\001\002\000\014\004\151\005\152\006\153\007" +
    "\154\031\162\001\002\000\016\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\014\uffe7\031\uffe7\001\002\000\004\046\164\001" +
    "\002\000\004\014\uffcc\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\005\001\001\000\004\005\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\051\011" +
    "\044\013\035\016\045\017\027\020\047\021\033\022\042" +
    "\024\046\025\037\026\050\027\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\140\010\146\015\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\146\015\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\146\015\157\001\001" +
    "\000\006\010\146\015\156\001\001\000\006\010\146\015" +
    "\155\001\001\000\006\010\146\015\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_ccss$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_ccss$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_ccss$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public Nodo padre;
    public int contador = 1;
    public String verror = "";
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        verror = verror + "Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +
          s.value + " no reconocido."+" CCSS"+"\n" ;
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico_ccss$actions {




  private final AnalizadorSintactico_ccss parser;

  /** Constructor */
  CUP$AnalizadorSintactico_ccss$actions(AnalizadorSintactico_ccss parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_ccss$do_action_part00000000(
    int                        CUP$AnalizadorSintactico_ccss$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_ccss$parser,
    java.util.Stack            CUP$AnalizadorSintactico_ccss$stack,
    int                        CUP$AnalizadorSintactico_ccss$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_ccss$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_ccss$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_ccss$parser.done_parsing();
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= INICIO 
            {
              Object RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
        parser.padre = (Nodo) inc;
        System.out.println("DOCUMENTO OK"); 
    
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO DEFINICION corf 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                Nodo temp;
                temp = (Nodo) tmp;
                temp.addHijo((Nodo)con);
                RESULT = temp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= 
            {
              Object RESULT =null;
		  
                Nodo tmp = new Nodo("INICIO");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
           
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION ::= DEFINICION EDITADO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                Nodo temp;
                temp = (Nodo) tmp;
                temp.addHijo((Nodo)con);
                RESULT = temp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION ::= id cori 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                     Nodo tmp = new Nodo("DEFINICION");
                     tmp.setNumNodo(parser.contador++); 
                     tmp.setValor(i.toString());
                     RESULT=tmp;
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("DEFINICION",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EDITADO ::= EDITADO CONTENIDO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                Nodo tep = (Nodo) tmp;
                tep.addHijo((Nodo)con);
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EDITADO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EDITADO ::= grupo pari id parf pyc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		 
                Nodo tmp = new Nodo("GRUPO");
                tmp.setNumNodo(parser.contador++); 
                tmp.setValor(i.toString());
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EDITADO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EDITADO ::= ids pari id parf pyc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		 
                Nodo tmp = new Nodo("IDS");
                tmp.setNumNodo(parser.contador++); 
                tmp.setValor(i.toString());
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EDITADO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= TEXTO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= FORMATO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= LETRA pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= TAMTEX pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= FONDOELEMENTO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= AUTO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= VISIBLE pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= BORDE pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO ::= OPAQUE pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO ::= COLORTEXT pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO ::= ALINEADO pyc 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("CONTENIDO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TEXTO ::= texto asig E0 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("TEXTO");
            tmp.setNumNodo(parser.contador++); 
            tmp.addHijo((Nodo)e1);
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TEXTO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // E0 ::= EXPRESION 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("E0",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION suma EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		
                Nodo tmp = new Nodo("SUMA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION resta EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		
                Nodo tmp = new Nodo("RESTA");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION multiplicacion EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		
                Nodo tmp = new Nodo("MULTIPLICACION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION division EXPRESION 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		
                Nodo tmp = new Nodo("DIVISION");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)e1);
                tmp.addHijo((Nodo)e2);
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= pari EXPRESION parf 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                RESULT = c1;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= TIPO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO ::= cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("CADENA");
            String str = i.toString();
            String ncadena=str.substring(1,str.length()-1);
            tmp.setValor(ncadena);
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("BOOL");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("NUMERO");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("ID");
            tmp.setValor(i.toString());
            tmp.setNumNodo(parser.contador++); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ALINEADO ::= alineado asig TIPO_ALI 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		
                Nodo temp = (Nodo)con; 
                Nodo tmp = new Nodo("ALINEADO");
                tmp.setNumNodo(parser.contador++); 
                tmp.setValor(temp.getNombre());
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("ALINEADO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_ALI ::= izquierda 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("IZQUIERDA");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_ALI",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_ALI ::= derecha 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("DERECHA");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_ALI",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_ALI ::= centrado 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("CENTRADO");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_ALI",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_ALI ::= justificado 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("JUSTIFICADO");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_ALI",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FORMATO ::= FORMATO coma TIPO_FORMATO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                Nodo tep = (Nodo) tmp;
                tep.addHijo((Nodo)con);
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("FORMATO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FORMATO ::= formato asig TIPO_FORMATO 
            {
              Object RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                Nodo tmp = new Nodo("FORMATO");
                tmp.setNumNodo(parser.contador++); 
                tmp.addHijo((Nodo)con);
                RESULT=tmp; 
            
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("FORMATO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_FORMATO ::= negrilla 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("NEGRILLA");
                    tmp.setNumNodo(parser.contador++); 
                    RESULT=tmp; 
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_FORMATO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_FORMATO ::= cursiva 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("CURSIVA");
                    tmp.setNumNodo(parser.contador++); 
                    RESULT=tmp; 
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_FORMATO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_FORMATO ::= mayuscula 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MAYUSCULA");
                    tmp.setNumNodo(parser.contador++); 
                    RESULT=tmp; 
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_FORMATO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_FORMATO ::= minuscula 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("MINUSCULA");
                    tmp.setNumNodo(parser.contador++); 
                    RESULT=tmp; 
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_FORMATO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_FORMATO ::= capital 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("CAPITAL");
                    tmp.setNumNodo(parser.contador++); 
                    RESULT=tmp; 
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_FORMATO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LETRA ::= letra asig cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("LETRA");
            tmp.setNumNodo(parser.contador++);
            String str = i.toString();
            String ncadena=str.substring(1,str.length()-1);
            tmp.setValor(ncadena); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("LETRA",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TAMTEX ::= tamtex asig numero 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
            Nodo tmp = new Nodo("TAMTEX");
            tmp.setNumNodo(parser.contador++);
            tmp.setValor(i.toString()); 
            RESULT=tmp; 
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TAMTEX",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FONDOELEMENTO ::= fondoelemento asig cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                    Nodo tmp = new Nodo("FONDOELEMENTO");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena); 
                    RESULT=tmp; 
                
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("FONDOELEMENTO",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AUTO ::= autoredimension asig cori bool coma TIPO_AUTO corf 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-3)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                    Nodo tmp = new Nodo("AUTO");
                    tmp.setNumNodo(parser.contador++);
                    Nodo temp = (Nodo)con;
                    temp.setNombre(i.toString());
                    tmp.addHijo(temp); 
                    RESULT=tmp; 
         
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("AUTO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_AUTO ::= horizontal 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("");
                tmp.setValor("HORIZONTAL");
                tmp.setNumNodo(parser.contador++);
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_AUTO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_AUTO ::= vertical 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("");
                tmp.setValor("VERTICAL");
                tmp.setNumNodo(parser.contador++);
                RESULT=tmp;
              
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("TIPO_AUTO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VISIBLE ::= visible asig bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                Nodo tmp = new Nodo("VISIBLE");
                tmp.setValor(i.toString());
                tmp.setNumNodo(parser.contador++);
                RESULT=tmp;
             
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("VISIBLE",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BORDE ::= borde asig cori numero coma cadena coma bool corf 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-5)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-3)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).right;
		Object i3 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-1)).value;
		 
                Nodo tmp = new Nodo("BORDE");
                tmp.setNumNodo(parser.contador++);
                Nodo tmp1 = new Nodo("TAMANO");
                tmp1.setNumNodo(parser.contador++);
                tmp1.setValor(i1.toString());
                Nodo tmp2 = new Nodo("COLOR");
                tmp2.setNumNodo(parser.contador++);
                String str = i2.toString();
                String ncadena=str.substring(1,str.length()-1);
                tmp2.setValor(ncadena);
                Nodo tmp3 = new Nodo("CURVA");
                tmp3.setNumNodo(parser.contador++);
                tmp3.setValor(i3.toString());
                tmp.addHijo((Nodo)tmp1);
                tmp.addHijo((Nodo)tmp2);
                tmp.addHijo((Nodo)tmp3);
                RESULT=tmp;
         
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("BORDE",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPAQUE ::= opaque asig bool 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                Nodo tmp = new Nodo("OPAQUE");
                tmp.setValor(i.toString());
                tmp.setNumNodo(parser.contador++);
                RESULT=tmp;
          
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("OPAQUE",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COLORTEXT ::= colortext asig cadena 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_ccss$stack.peek()).value;
		 
                 Nodo tmp = new Nodo("COLORTEXT");
                 tmp.setNumNodo(parser.contador++);
                 String str = i.toString();
                 String ncadena=str.substring(1,str.length()-1);
                 tmp.setValor(ncadena); 
                 RESULT=tmp; 
        
              CUP$AnalizadorSintactico_ccss$result = parser.getSymbolFactory().newSymbol("COLORTEXT",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.elementAt(CUP$AnalizadorSintactico_ccss$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_ccss$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_ccss$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico_ccss$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_ccss$do_action(
    int                        CUP$AnalizadorSintactico_ccss$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_ccss$parser,
    java.util.Stack            CUP$AnalizadorSintactico_ccss$stack,
    int                        CUP$AnalizadorSintactico_ccss$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico_ccss$do_action_part00000000(
                               CUP$AnalizadorSintactico_ccss$act_num,
                               CUP$AnalizadorSintactico_ccss$parser,
                               CUP$AnalizadorSintactico_ccss$stack,
                               CUP$AnalizadorSintactico_ccss$top);
    }
}

}
