/* The following code was generated by JFlex 1.6.1 */

package achtml;
import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_chtml.jflex</tt>
 */
public class AnalizadorLexico_chtml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\35\1\36\1\35\1\35\22\0\1\35\1\0\1\4"+
    "\12\0\1\2\1\3\1\0\12\1\1\0\1\34\1\5\1\33\1\13"+
    "\2\0\1\23\1\24\1\20\1\26\1\16\1\14\1\0\1\21\1\7"+
    "\1\31\1\0\1\11\1\22\1\15\1\12\1\30\1\0\1\27\1\32"+
    "\1\6\1\10\2\0\1\17\1\0\1\25\6\0\1\23\1\24\1\20"+
    "\1\26\1\16\1\14\1\0\1\21\1\7\1\31\1\0\1\11\1\22"+
    "\1\15\1\12\1\30\1\0\1\27\1\32\1\6\1\10\2\0\1\17"+
    "\1\0\1\25\12\0\1\36\252\0\2\7\115\0\1\32\u1ea8\0\1\36"+
    "\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\2\1\1\4\1\5"+
    "\1\6\2\0\1\7\6\0\1\2\21\0\1\10\1\0"+
    "\1\11\5\0\1\12\1\0\1\13\17\0\1\14\1\15"+
    "\16\0\1\16\13\0\1\17\4\0\1\20\1\21\13\0"+
    "\1\22\3\0\1\23\1\0\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\37\0\272"+
    "\0\331\0\37\0\37\0\370\0\u0117\0\174\0\37\0\u0136"+
    "\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1\0\u0117\0\u01f0\0\u020f"+
    "\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9\0\u02e8\0\u0307"+
    "\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03c1\0\u03e0\0\37"+
    "\0\u03ff\0\37\0\u041e\0\u043d\0\u045c\0\u047b\0\u049a\0\37"+
    "\0\u04b9\0\37\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554\0\u0573"+
    "\0\u0592\0\u05b1\0\u05d0\0\u05ef\0\u060e\0\u062d\0\u064c\0\u066b"+
    "\0\u068a\0\37\0\37\0\u06a9\0\u06c8\0\u06e7\0\u0706\0\u0725"+
    "\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d"+
    "\0\u083c\0\37\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7\0\u08f6"+
    "\0\u0915\0\u0934\0\u0953\0\u0972\0\u0991\0\37\0\u09b0\0\u09cf"+
    "\0\u09ee\0\u0a0d\0\37\0\37\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89"+
    "\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24\0\u0b43\0\u0b62\0\37"+
    "\0\u0b81\0\u0ba0\0\u0bbf\0\37\0\u0bde\0\37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\5\2\1\7"+
    "\1\10\12\2\1\11\3\2\1\12\1\13\1\14\41\0"+
    "\1\3\1\0\1\15\34\0\1\3\35\0\4\16\1\17"+
    "\32\16\6\0\1\20\5\0\1\21\1\0\1\22\1\0"+
    "\1\23\30\0\1\24\34\0\1\25\63\0\1\14\2\0"+
    "\1\26\44\0\1\27\6\0\1\30\27\0\1\31\44\0"+
    "\1\32\31\0\1\33\7\0\1\34\1\35\7\0\1\36"+
    "\22\0\1\37\27\0\1\40\36\0\1\41\47\0\1\42"+
    "\34\0\1\43\41\0\1\44\34\0\1\45\52\0\1\46"+
    "\12\0\1\47\62\0\1\50\32\0\1\51\33\0\1\52"+
    "\23\0\1\53\34\0\1\54\32\0\1\55\57\0\1\56"+
    "\42\0\1\57\41\0\1\60\26\0\1\61\26\0\1\62"+
    "\35\0\1\63\37\0\1\64\42\0\1\65\1\0\1\66"+
    "\42\0\1\67\42\0\1\70\17\0\1\71\37\0\1\72"+
    "\37\0\1\73\40\0\1\74\31\0\1\75\7\0\1\76"+
    "\1\77\7\0\1\100\23\0\1\101\32\0\1\102\37\0"+
    "\1\103\36\0\1\104\23\0\5\73\1\105\31\73\20\0"+
    "\1\106\34\0\1\107\52\0\1\110\12\0\1\111\62\0"+
    "\1\112\31\0\1\113\11\0\5\104\1\114\31\104\5\73"+
    "\1\105\6\73\1\115\22\73\23\0\1\116\42\0\1\117"+
    "\41\0\1\120\26\0\1\121\27\0\1\122\46\0\1\123"+
    "\13\0\5\104\1\114\6\104\1\124\22\104\5\73\1\105"+
    "\1\73\1\125\27\73\24\0\1\126\42\0\1\127\21\0"+
    "\1\60\34\0\1\130\53\0\1\131\10\0\5\104\1\114"+
    "\1\104\1\132\27\104\5\73\1\105\7\73\1\133\21\73"+
    "\16\0\1\134\32\0\1\135\37\0\1\136\35\0\1\137"+
    "\24\0\5\104\1\114\7\104\1\140\21\104\2\73\1\141"+
    "\2\73\1\105\31\73\25\0\1\142\24\0\1\143\36\0"+
    "\1\144\23\0\2\104\1\145\2\104\1\114\31\104\5\73"+
    "\1\105\1\146\30\73\23\0\1\147\13\0\5\104\1\114"+
    "\1\150\30\104\5\73\1\105\10\73\1\151\20\73\26\0"+
    "\1\152\10\0\5\104\1\114\1\104\1\153\27\104\5\73"+
    "\1\105\11\73\1\154\17\73\12\0\1\155\24\0\5\104"+
    "\1\114\1\156\30\104\5\73\1\105\1\157\30\73\13\0"+
    "\1\160\23\0\5\104\1\114\2\104\1\161\26\104\5\73"+
    "\1\105\4\73\1\162\24\73\5\104\1\114\3\104\1\163"+
    "\25\104\5\73\1\105\5\73\1\164\23\73\5\104\1\114"+
    "\4\104\1\165\31\104\1\114\5\104\1\166\23\104";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3069];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\2\11\1\1\2\0"+
    "\1\11\6\0\1\1\21\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\11\17\0\2\11\16\0\1\11\13\0"+
    "\1\11\4\0\2\11\13\0\1\11\3\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//VARIALES Y METODOS DEL SCANER



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico_chtml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 196) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolo.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext() + " Linea: "+yyline + " Columna: "+yycolumn);
            }
          case 21: break;
          case 2: 
            { return new Symbol(Simbolo.numero,  yycolumn, yyline, yytext());
            }
          case 22: break;
          case 3: 
            { return new Symbol(Simbolo.cierre, yycolumn, yyline);
            }
          case 23: break;
          case 4: 
            { return new Symbol(Simbolo.igual, yycolumn, yyline);
            }
          case 24: break;
          case 5: 
            { return new Symbol(Simbolo.ptc, yycolumn, yyline);
            }
          case 25: break;
          case 6: 
            { /* Se ignoran */
            }
          case 26: break;
          case 7: 
            { return new Symbol(Simbolo.cadena,  yycolumn, yyline, yytext());
            }
          case 27: break;
          case 8: 
            { return new Symbol(Simbolo.cjsi, yycolumn, yyline);
            }
          case 28: break;
          case 9: 
            { return new Symbol(Simbolo.ruta, yycolumn, yyline);
            }
          case 29: break;
          case 10: 
            { return new Symbol(Simbolo.ccssf, yycolumn, yyline);
            }
          case 30: break;
          case 11: 
            { return new Symbol(Simbolo.fondo, yycolumn, yyline);
            }
          case 31: break;
          case 12: 
            { return new Symbol(Simbolo.cuerpoi, yycolumn, yyline);
            }
          case 32: break;
          case 13: 
            { return new Symbol(Simbolo.htmli, yycolumn, yyline);
            }
          case 33: break;
          case 14: 
            { return new Symbol(Simbolo.cjsf, yycolumn, yyline);
            }
          case 34: break;
          case 15: 
            { return new Symbol(Simbolo.htmlf, yycolumn, yyline);
            }
          case 35: break;
          case 16: 
            { return new Symbol(Simbolo.cuerpof, yycolumn, yyline);
            }
          case 36: break;
          case 17: 
            { return new Symbol(Simbolo.encabezadoi, yycolumn, yyline);
            }
          case 37: break;
          case 18: 
            { return new Symbol(Simbolo.encabezadof, yycolumn, yyline);
            }
          case 38: break;
          case 19: 
            { return new Symbol(Simbolo.texto,  yycolumn, yyline, yytext());
            }
          case 39: break;
          case 20: 
            { return new Symbol(Simbolo.titulo,  yycolumn, yyline, yytext());
            }
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
