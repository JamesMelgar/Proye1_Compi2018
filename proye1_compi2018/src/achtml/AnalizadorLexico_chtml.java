/* The following code was generated by JFlex 1.6.1 */

package achtml;
import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico_chtml.jflex</tt>
 */
public class AnalizadorLexico_chtml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\45\1\46\1\45\1\45\22\0\1\45\1\0\1\6"+
    "\12\0\1\2\1\5\1\11\12\1\1\10\1\37\1\12\1\35\1\36"+
    "\1\0\1\3\1\23\1\24\1\7\1\26\1\22\1\17\1\40\1\13"+
    "\1\20\1\33\1\43\1\16\1\15\1\21\1\27\1\32\1\1\1\31"+
    "\1\34\1\14\1\30\1\44\1\1\1\41\1\1\1\25\4\0\1\42"+
    "\1\0\1\23\1\24\1\7\1\26\1\22\1\17\1\40\1\13\1\20"+
    "\1\33\1\43\1\16\1\15\1\21\1\27\1\32\1\1\1\31\1\34"+
    "\1\14\1\30\1\44\1\1\1\41\1\1\1\25\12\0\1\46\32\0"+
    "\1\4\11\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0"+
    "\37\1\1\0\70\1\2\20\115\1\1\34\u0142\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\21\0\165\1\1\0\2\1\2\0"+
    "\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\24\1\1\0\123\1\1\0\213\1\1\0\255\1\1\0\46\1\2\0"+
    "\1\1\7\0\47\1\11\0\55\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\10\0\33\1\5\0\3\1\35\0\13\1\5\0"+
    "\112\1\4\0\146\1\1\0\10\1\2\0\12\1\1\0\23\1\2\0"+
    "\1\1\20\0\73\1\2\0\145\1\16\0\66\1\4\0\1\1\5\0"+
    "\56\1\22\0\34\1\104\0\23\1\61\0\200\1\2\0\12\1\1\0"+
    "\23\1\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\2\0\11\1\2\0\2\1\2\0\4\1\10\0"+
    "\1\1\4\0\2\1\1\0\5\1\2\0\14\1\17\0\3\1\1\0"+
    "\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\2\0\1\1\1\0\5\1\4\0\2\1\2\0"+
    "\3\1\3\0\1\1\7\0\4\1\1\0\1\1\7\0\20\1\13\0"+
    "\3\1\1\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\2\0\12\1\1\0\3\1\1\0\3\1\2\0"+
    "\1\1\17\0\4\1\2\0\12\1\21\0\3\1\1\0\10\1\2\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0"+
    "\11\1\2\0\2\1\2\0\3\1\10\0\2\1\4\0\2\1\1\0"+
    "\5\1\2\0\12\1\1\0\1\1\20\0\2\1\1\0\6\1\3\0"+
    "\3\1\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\2\1\3\0\3\1\3\0\14\1\4\0\5\1\3\0\3\1\1\0"+
    "\4\1\2\0\1\1\6\0\1\1\16\0\12\1\20\0\4\1\1\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\20\1\3\0\10\1\1\0"+
    "\3\1\1\0\4\1\7\0\2\1\1\0\2\1\6\0\4\1\2\0"+
    "\12\1\21\0\3\1\1\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\2\0\11\1\1\0\3\1\1\0\4\1\7\0"+
    "\2\1\7\0\1\1\1\0\4\1\2\0\12\1\1\0\2\1\16\0"+
    "\3\1\1\0\10\1\1\0\3\1\1\0\51\1\2\0\10\1\1\0"+
    "\3\1\1\0\5\1\10\0\1\1\10\0\4\1\2\0\12\1\12\0"+
    "\6\1\2\0\2\1\1\0\22\1\3\0\30\1\1\0\11\1\1\0"+
    "\1\1\2\0\7\1\3\0\1\1\4\0\6\1\1\0\1\1\1\0"+
    "\10\1\6\0\12\1\2\0\2\1\15\0\72\1\5\0\17\1\1\0"+
    "\12\1\47\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\15\1\1\0\3\1\2\0\5\1\1\0"+
    "\1\1\1\0\6\1\2\0\12\1\2\0\4\1\40\0\1\1\27\0"+
    "\2\1\6\0\12\1\13\0\1\1\1\0\1\1\1\0\1\1\4\0"+
    "\12\1\1\0\44\1\4\0\24\1\1\0\22\1\1\0\44\1\11\0"+
    "\1\1\71\0\112\1\6\0\116\1\2\0\46\1\1\0\1\1\5\0"+
    "\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0"+
    "\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0\41\1\1\0"+
    "\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\17\1\1\0"+
    "\71\1\1\0\4\1\2\0\103\1\2\0\3\1\40\0\20\1\20\0"+
    "\125\1\14\0\u026c\1\2\0\21\1\1\4\32\1\5\0\113\1\3\0"+
    "\13\1\7\0\15\1\1\0\7\1\13\0\25\1\13\0\24\1\14\0"+
    "\15\1\1\0\3\1\1\0\2\1\14\0\124\1\3\0\1\1\4\0"+
    "\2\1\2\0\12\1\41\0\3\1\2\0\12\1\6\0\130\1\10\0"+
    "\53\1\5\0\106\1\12\0\37\1\1\0\14\1\4\0\14\1\12\0"+
    "\50\1\2\0\5\1\13\0\54\1\4\0\32\1\6\0\12\1\46\0"+
    "\34\1\4\0\77\1\1\0\35\1\2\0\13\1\6\0\12\1\15\0"+
    "\1\1\10\0\17\1\101\0\114\1\4\0\12\1\21\0\11\1\14\0"+
    "\164\1\14\0\70\1\10\0\12\1\3\0\61\1\122\0\3\1\1\0"+
    "\43\1\1\0\2\1\6\0\366\1\6\0\u011a\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\3\0\13\4\35\0\1\46\1\46\5\0\1\4"+
    "\17\0\2\1\23\0\1\1\12\0\1\4\21\0\1\1\15\0\1\1"+
    "\20\0\15\1\63\0\41\1\21\0\1\1\4\0\1\1\2\0\12\1"+
    "\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\43\3\1\1\0\13\1\2\0\4\1\5\0\5\1\4\0"+
    "\1\1\21\0\51\1\u032d\0\64\1\u0716\0\57\1\1\0\57\1\1\0"+
    "\205\1\6\0\11\1\14\0\46\1\1\0\1\1\5\0\1\1\2\0"+
    "\70\1\7\0\1\1\17\0\30\1\11\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\40\1\57\0\1\1\u01d0\0\1\4\4\0\3\1\31\0"+
    "\17\1\1\0\5\1\2\0\5\1\4\0\126\1\2\0\2\1\2\0"+
    "\3\1\1\0\132\1\1\0\4\1\5\0\51\1\3\0\136\1\21\0"+
    "\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0"+
    "\56\1\2\0\u010d\1\3\0\34\1\24\0\63\1\1\0\12\1\1\0"+
    "\37\1\1\0\123\1\45\0\11\1\2\0\147\1\2\0\4\1\1\0"+
    "\36\1\2\0\2\1\105\0\61\1\30\0\64\1\14\0\105\1\13\0"+
    "\12\1\6\0\30\1\3\0\1\1\4\0\56\1\2\0\44\1\14\0"+
    "\35\1\3\0\101\1\16\0\13\1\6\0\37\1\1\0\67\1\11\0"+
    "\16\1\2\0\12\1\6\0\27\1\3\0\111\1\30\0\3\1\2\0"+
    "\20\1\2\0\5\1\12\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\1\0\53\1\1\0\4\1\4\0\2\1\132\0"+
    "\53\1\1\0\2\1\2\0\12\1\6\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\14\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0"+
    "\14\1\4\0\20\1\20\0\16\1\5\0\2\1\30\0\3\1\40\0"+
    "\5\1\1\0\207\1\23\0\12\1\7\0\32\1\4\0\1\1\1\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0\14\1\1\0\32\1\1\0\23\1\1\0\2\1\1\0"+
    "\17\1\2\0\16\1\42\0\173\1\105\0\65\1\210\0\1\1\202\0"+
    "\35\1\3\0\61\1\17\0\1\1\37\0\40\1\20\0\33\1\5\0"+
    "\53\1\5\0\36\1\2\0\44\1\4\0\10\1\1\0\5\1\52\0"+
    "\236\1\2\0\12\1\126\0\50\1\10\0\64\1\234\0\u0137\1\11\0"+
    "\26\1\12\0\10\1\230\0\6\1\2\0\1\1\1\0\54\1\1\0"+
    "\2\1\3\0\1\1\2\0\27\1\12\0\27\1\11\0\37\1\141\0"+
    "\26\1\12\0\32\1\106\0\70\1\6\0\2\1\100\0\4\1\1\0"+
    "\2\1\5\0\10\1\1\0\3\1\1\0\33\1\4\0\3\1\4\0"+
    "\1\1\40\0\35\1\3\0\35\1\43\0\10\1\1\0\36\1\31\0"+
    "\66\1\12\0\26\1\12\0\23\1\15\0\22\1\156\0\111\1\u03b7\0"+
    "\107\1\37\0\12\1\17\0\74\1\25\0\31\1\7\0\12\1\6\0"+
    "\65\1\1\0\12\1\20\0\44\1\2\0\1\1\11\0\105\1\13\0"+
    "\13\1\45\0\22\1\1\0\45\1\170\0\73\1\5\0\12\1\7\0"+
    "\3\1\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\2\0\11\1\2\0\2\1\2\0\3\1\11\0"+
    "\1\1\5\0\7\1\2\0\7\1\3\0\5\1\u010b\0\106\1\1\0"+
    "\1\1\10\0\12\1\246\0\66\1\2\0\11\1\77\0\101\1\3\0"+
    "\1\1\13\0\12\1\46\0\70\1\10\0\12\1\u01d6\0\112\1\25\0"+
    "\1\1\u01c0\0\71\1\u0507\0\u0399\1\147\0\157\1\u0b91\0\u042f\1\u33d1\0"+
    "\u0239\1\7\0\37\1\1\0\12\1\146\0\36\1\2\0\5\1\13\0"+
    "\67\1\11\0\4\1\14\0\12\1\11\0\25\1\5\0\23\1\u0370\0"+
    "\105\1\13\0\57\1\20\0\21\1\u4060\0\2\1\u0bfe\0\153\1\5\0"+
    "\15\1\3\0\11\1\7\0\12\1\3\0\2\1\u14c6\0\5\1\3\0"+
    "\6\1\10\0\10\1\2\0\7\1\36\0\4\1\224\0\3\1\u01bb\0"+
    "\125\1\1\0\107\1\1\0\2\1\2\0\1\1\2\0\2\1\2\0"+
    "\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\101\1\1\0"+
    "\4\1\2\0\10\1\1\0\7\1\1\0\34\1\1\0\4\1\1\0"+
    "\5\1\1\0\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1\1\0"+
    "\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0"+
    "\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\10\1\2\0"+
    "\62\1\u1000\0\305\1\13\0\7\1\u0529\0\4\1\1\0\33\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\6\0\1\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\12\1\1\0\21\1\5\0\3\1\1\0\5\1\1\0"+
    "\21\1\u0274\0\32\1\6\0\32\1\6\0\32\1\u0e76\0\ua6d7\1\51\0"+
    "\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\1\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\1\3\4\2\1\4"+
    "\1\5\1\6\2\2\1\7\1\0\1\10\1\2\1\0"+
    "\1\2\11\0\2\2\1\11\6\2\1\0\1\2\2\0"+
    "\1\12\1\0\1\13\15\0\10\2\1\14\1\0\1\2"+
    "\4\0\1\15\14\0\2\2\1\16\2\2\1\17\2\2"+
    "\1\0\1\20\1\21\1\0\1\22\15\0\11\2\1\23"+
    "\1\2\1\24\1\25\1\26\1\0\1\27\3\0\1\30"+
    "\1\31\1\32\3\0\1\33\1\0\1\34\2\0\2\2"+
    "\1\35\1\2\1\36\15\2\1\37\1\0\1\40\1\41"+
    "\1\0\1\42\1\0\1\43\1\44\2\0\4\2\1\45"+
    "\14\2\1\0\1\46\2\0\1\47\1\21\1\2\1\50"+
    "\14\2\1\51\3\0\1\52\3\2\1\53\1\54\1\55"+
    "\3\2\1\56\1\2\1\57\1\2\2\0\1\60\1\2"+
    "\1\61\1\62\1\2\1\63\1\2\1\64\1\65\1\2"+
    "\1\66\1\67\1\2\1\70\1\2\1\71\4\2\1\72"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\47\0\47\0\47\0\u0186\0\u01ad\0\u01d4"+
    "\0\165\0\47\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be"+
    "\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6"+
    "\0\116\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507"+
    "\0\u052e\0\u0555\0\u057c\0\47\0\u05a3\0\47\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\116\0\u08fd\0\u0924\0\u094b\0\u0972"+
    "\0\u0999\0\u09c0\0\47\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb"+
    "\0\u0be2\0\116\0\u0c09\0\u0c30\0\116\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\116\0\47\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff"+
    "\0\u1026\0\u104d\0\116\0\u1074\0\116\0\116\0\116\0\u109b"+
    "\0\47\0\u10c2\0\u10e9\0\u1110\0\u1137\0\47\0\47\0\u115e"+
    "\0\u1185\0\u11ac\0\47\0\u11d3\0\47\0\u11fa\0\u1221\0\u1248"+
    "\0\u126f\0\116\0\u1296\0\116\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u109b\0\u14b8\0\47\0\47\0\u14df\0\47\0\u1506"+
    "\0\47\0\47\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0"+
    "\0\116\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701"+
    "\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\47\0\u1812"+
    "\0\u1839\0\47\0\116\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc"+
    "\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34"+
    "\0\u1a5b\0\116\0\u1a82\0\u1aa9\0\u1ad0\0\116\0\u1af7\0\u1b1e"+
    "\0\u1b45\0\u1b6c\0\116\0\116\0\u1b93\0\u1bba\0\u1be1\0\116"+
    "\0\u1c08\0\116\0\u1c2f\0\u1c56\0\u1c7d\0\47\0\u1ca4\0\116"+
    "\0\116\0\u1ccb\0\116\0\u1cf2\0\116\0\116\0\u1d19\0\47"+
    "\0\47\0\u1d40\0\116\0\u1d67\0\116\0\u1d8e\0\u1db5\0\u1ddc"+
    "\0\u1e03\0\116\0\116";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\2\2\1\4\1\5\2\2\1\6\4\3"+
    "\1\7\1\10\2\3\1\11\5\3\1\12\3\3\1\13"+
    "\1\14\1\15\1\16\3\3\1\17\1\20\51\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\22\3\3\0\7\3"+
    "\6\21\1\22\40\21\1\0\2\3\1\0\2\3\1\0"+
    "\1\23\1\24\2\0\3\3\1\25\16\3\3\0\7\3"+
    "\7\0\1\26\4\0\1\27\2\0\1\30\1\31\1\0"+
    "\1\32\1\0\1\33\2\0\1\34\2\0\1\35\1\0"+
    "\1\36\13\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\5\3\1\37\6\3\1\40\5\3\3\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\3\0\13\3\1\41"+
    "\6\3\3\0\7\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\3\0\3\3\1\42\2\3\1\43\13\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\15\3\1\44\4\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\16\3\1\45\3\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\10\3\1\46\11\3\3\0\7\3\45\0\1\20\2\0"+
    "\2\3\1\0\2\3\1\0\1\3\3\0\21\3\1\47"+
    "\3\0\7\3\11\0\1\50\36\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\5\3\1\51\14\3\3\0\7\3"+
    "\7\0\1\52\3\0\1\53\1\54\6\0\1\55\1\56"+
    "\3\0\1\57\2\0\1\60\33\0\1\61\1\0\1\62"+
    "\1\63\43\0\1\64\43\0\1\65\52\0\1\66\54\0"+
    "\1\67\51\0\1\70\37\0\1\71\46\0\1\72\6\0"+
    "\1\73\15\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\6\3\1\74\13\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\6\3\1\75\13\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\1\3\1\76\3\3\1\77\14\3\3\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\100\3\0\22\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\1\3\1\101\20\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\15\3\1\102\4\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\3\3\1\103\16\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\21\3\1\104\3\0\7\3"+
    "\11\0\1\105\36\0\2\3\1\0\2\3\1\0\1\106"+
    "\3\0\22\3\3\0\7\3\34\0\1\107\26\0\1\110"+
    "\65\0\1\111\35\0\1\112\60\0\1\113\26\0\1\114"+
    "\73\0\1\115\31\0\1\116\40\0\1\117\53\0\1\120"+
    "\32\0\1\121\6\0\1\122\44\0\1\123\41\0\1\124"+
    "\60\0\1\125\43\0\1\126\50\0\1\127\27\0\1\3"+
    "\1\130\1\0\2\3\1\0\1\3\3\0\22\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\13\3\1\131\6\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\14\3\1\132\5\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\6\3\1\133\13\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\1\134\21\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\10\3"+
    "\1\135\11\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\17\3\1\136\2\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\14\3"+
    "\1\137\5\3\3\0\7\3\1\0\1\140\5\0\1\140"+
    "\1\0\1\140\1\0\22\140\3\0\5\140\3\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\22\3\3\0\3\3"+
    "\1\141\3\3\34\0\1\142\27\0\1\143\54\0\1\144"+
    "\54\0\1\145\45\0\1\146\32\0\1\147\50\0\1\150"+
    "\72\0\1\151\44\0\1\152\31\0\1\153\46\0\1\154"+
    "\52\0\1\155\37\0\1\156\50\0\1\157\40\0\1\160"+
    "\53\0\1\161\26\0\2\3\1\0\2\3\1\0\1\162"+
    "\3\0\1\3\1\163\2\3\1\164\1\165\1\3\1\166"+
    "\1\3\1\167\2\3\1\170\2\3\1\171\1\3\1\172"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\14\3\1\173\5\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\7\3\1\174\12\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\14\3\1\175\5\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\14\3\1\176\5\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\16\3\1\177\3\3\3\0\7\3\1\0\1\140"+
    "\3\0\1\200\1\0\1\140\1\0\1\140\1\0\22\140"+
    "\3\0\5\140\20\0\1\201\72\0\1\202\36\0\1\203"+
    "\32\0\1\204\57\0\1\205\42\0\1\206\37\0\1\207"+
    "\54\0\1\210\50\0\1\211\31\0\1\212\60\0\1\213"+
    "\54\0\1\214\35\0\1\215\57\0\1\216\40\0\1\217"+
    "\26\0\2\3\1\0\2\3\1\0\1\220\3\0\1\221"+
    "\1\222\6\3\1\223\1\224\3\3\1\225\2\3\1\226"+
    "\1\3\3\0\7\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\3\0\5\3\1\227\1\3\1\230\1\231\11\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\5\3\1\232\14\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\2\3\1\233\17\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\6\3\1\234\13\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\14\3\1\235\5\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\17\3\1\236\2\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\10\3\1\237\11\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\17\3\1\240\2\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\10\3\1\241\11\3"+
    "\3\0\7\3\1\0\1\242\5\0\1\242\3\0\22\242"+
    "\3\0\5\242\16\0\1\243\61\0\1\244\46\0\1\245"+
    "\61\0\1\246\25\0\1\247\47\0\1\250\46\0\1\251"+
    "\45\0\1\252\27\0\1\253\66\0\1\254\25\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\21\3\1\255\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\1\3\1\256\20\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\20\3\1\257\1\3\3\0"+
    "\7\3\1\0\2\3\1\0\2\3\1\0\1\3\3\0"+
    "\7\3\1\260\12\3\3\0\7\3\1\0\2\3\1\0"+
    "\2\3\1\0\1\3\3\0\21\3\1\261\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\1\3"+
    "\1\262\20\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\22\3\3\0\1\3\1\263\5\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\11\3"+
    "\1\264\10\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\3\3\1\265\16\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\10\3"+
    "\1\266\11\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\267\3\0\3\3\1\270\16\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\1\3"+
    "\1\271\20\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\272\3\0\22\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\6\3\1\273\13\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\5\3\1\274\14\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\13\3\1\275\6\3"+
    "\3\0\7\3\22\0\1\276\47\0\1\277\50\0\1\300"+
    "\40\0\1\301\60\0\1\302\16\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\21\3\1\303\3\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\3\0\2\3\1\304"+
    "\17\3\3\0\7\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\3\0\10\3\1\305\11\3\3\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\3\0\16\3\1\306"+
    "\3\3\3\0\7\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\3\0\15\3\1\307\4\3\3\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\3\0\1\3\1\310"+
    "\20\3\3\0\7\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\3\0\3\3\1\311\16\3\3\0\7\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\3\0\22\3\3\0"+
    "\2\3\1\312\4\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\3\0\22\3\3\0\1\313\6\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\10\3\1\314\11\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\10\3\1\315\11\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\14\3\1\316\5\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\5\3\1\317\14\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\7\3\1\320\12\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\6\3\1\321\13\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\14\3\1\322\5\3"+
    "\3\0\7\3\41\0\1\323\30\0\1\324\43\0\1\325"+
    "\27\0\2\3\1\0\2\3\1\0\1\3\3\0\3\3"+
    "\1\326\16\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\22\3\3\0\2\3\1\327\4\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\17\3"+
    "\1\330\2\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\3\3\1\331\16\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\14\3"+
    "\1\332\5\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\10\3\1\333\11\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\1\3"+
    "\1\334\20\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\7\3\1\335\12\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\11\3"+
    "\1\336\10\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\337\3\0\22\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\6\3\1\340\13\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\14\3\1\341\5\3\3\0\7\3\1\0\2\3"+
    "\1\0\2\3\1\0\1\3\3\0\3\3\1\342\16\3"+
    "\3\0\7\3\1\0\2\3\1\0\2\3\1\0\1\3"+
    "\3\0\6\3\1\343\13\3\3\0\7\3\14\0\1\344"+
    "\60\0\1\345\41\0\1\346\26\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\1\3\1\347\20\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\14\3"+
    "\1\350\5\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\14\3\1\351\5\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\22\3"+
    "\3\0\2\3\1\352\4\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\6\3\1\353\13\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\7\3"+
    "\1\354\12\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\7\3\1\355\12\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\6\3"+
    "\1\356\13\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\7\3\1\357\12\3\3\0\7\3"+
    "\27\0\1\360\46\0\1\361\20\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\7\3\1\362\12\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\10\3"+
    "\1\363\11\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\12\3\1\364\7\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\16\3"+
    "\1\365\3\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\22\3\3\0\1\3\1\366\5\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\10\3"+
    "\1\367\11\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\1\3\1\370\20\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\13\3"+
    "\1\371\6\3\3\0\7\3\1\0\2\3\1\0\2\3"+
    "\1\0\1\3\3\0\14\3\1\372\5\3\3\0\7\3"+
    "\1\0\2\3\1\0\2\3\1\0\1\3\3\0\14\3"+
    "\1\373\5\3\3\0\7\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\3\11\3\1\1\0\1\11\1\1"+
    "\1\0\1\1\11\0\11\1\1\0\1\1\2\0\1\11"+
    "\1\0\1\11\15\0\11\1\1\0\1\1\4\0\1\11"+
    "\14\0\10\1\1\0\1\1\1\11\1\0\1\1\15\0"+
    "\16\1\1\0\1\11\3\0\1\1\2\11\3\0\1\11"+
    "\1\0\1\11\2\0\23\1\1\0\2\11\1\0\1\11"+
    "\1\0\2\11\2\0\21\1\1\0\1\11\2\0\1\11"+
    "\20\1\3\0\16\1\2\0\1\11\11\1\2\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
//VARIALES Y METODOS DEL SCANER



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico_chtml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2722) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolo.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error lexico: "+yytext() + " Linea: "+yyline + " Columna: "+yycolumn);
            }
          case 60: break;
          case 2: 
            { return new Symbol(Simbolo.palabra,  yycolumn, yyline, yytext());
            }
          case 61: break;
          case 3: 
            { return new Symbol(Simbolo.abierto, yycolumn, yyline);
            }
          case 62: break;
          case 4: 
            { return new Symbol(Simbolo.igual, yycolumn, yyline);
            }
          case 63: break;
          case 5: 
            { return new Symbol(Simbolo.cierre, yycolumn, yyline);
            }
          case 64: break;
          case 6: 
            { return new Symbol(Simbolo.ptc, yycolumn, yyline);
            }
          case 65: break;
          case 7: 
            { /* Se ignoran */
            }
          case 66: break;
          case 8: 
            { return new Symbol(Simbolo.cadena,  yycolumn, yyline, yytext());
            }
          case 67: break;
          case 9: 
            { return new Symbol(Simbolo.ids, yycolumn, yyline);
            }
          case 68: break;
          case 10: 
            { return new Symbol(Simbolo.cti, yycolumn, yyline);
            }
          case 69: break;
          case 11: 
            { return new Symbol(Simbolo.cbi, yycolumn, yyline);
            }
          case 70: break;
          case 12: 
            { return new Symbol(Simbolo.ccss, yycolumn, yyline);
            }
          case 71: break;
          case 13: 
            { return new Symbol(Simbolo.cjsi, yycolumn, yyline);
            }
          case 72: break;
          case 14: 
            { return new Symbol(Simbolo.alto, yycolumn, yyline);
            }
          case 73: break;
          case 15: 
            { return new Symbol(Simbolo.ruta, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 16: 
            { return new Symbol(Simbolo.click, yycolumn, yyline);
            }
          case 75: break;
          case 17: 
            { return new Symbol(Simbolo.ccssf, yycolumn, yyline);
            }
          case 76: break;
          case 18: 
            { return new Symbol(Simbolo.cajai, yycolumn, yyline);
            }
          case 77: break;
          case 19: 
            { return new Symbol(Simbolo.fondo, yycolumn, yyline);
            }
          case 78: break;
          case 20: 
            { return new Symbol(Simbolo.ancho, yycolumn, yyline);
            }
          case 79: break;
          case 21: 
            { return new Symbol(Simbolo.grupo, yycolumn, yyline);
            }
          case 80: break;
          case 22: 
            { return new Symbol(Simbolo.valor, yycolumn, yyline);
            }
          case 81: break;
          case 23: 
            { return new Symbol(Simbolo.htmli, yycolumn, yyline);
            }
          case 82: break;
          case 24: 
            { return new Symbol(Simbolo.textoi, yycolumn, yyline);
            }
          case 83: break;
          case 25: 
            { return new Symbol(Simbolo.tablai, yycolumn, yyline);
            }
          case 84: break;
          case 26: 
            { return new Symbol(Simbolo.fili, yycolumn, yyline);
            }
          case 85: break;
          case 27: 
            { return new Symbol(Simbolo.botoni, yycolumn, yyline);
            }
          case 86: break;
          case 28: 
            { return new Symbol(Simbolo.paneli, yycolumn, yyline);
            }
          case 87: break;
          case 29: 
            { return new Symbol(Simbolo.ctf, yycolumn, yyline);
            }
          case 88: break;
          case 30: 
            { return new Symbol(Simbolo.cbf, yycolumn, yyline);
            }
          case 89: break;
          case 31: 
            { return new Symbol(Simbolo.path,  yycolumn, yyline, yytext());
            }
          case 90: break;
          case 32: 
            { return new Symbol(Simbolo.cuerpoi, yycolumn, yyline);
            }
          case 91: break;
          case 33: 
            { return new Symbol(Simbolo.tituloi, yycolumn, yyline);
            }
          case 92: break;
          case 34: 
            { return new Symbol(Simbolo.imageni, yycolumn, yyline);
            }
          case 93: break;
          case 35: 
            { return new Symbol(Simbolo.enlacei, yycolumn, yyline);
            }
          case 94: break;
          case 36: 
            { return new Symbol(Simbolo.opcioni, yycolumn, yyline);
            }
          case 95: break;
          case 37: 
            { return new Symbol(Simbolo.cjsf, yycolumn, yyline);
            }
          case 96: break;
          case 38: 
            { return new Symbol(Simbolo.textoai, yycolumn, yyline);
            }
          case 97: break;
          case 39: 
            { return new Symbol(Simbolo.spinneri, yycolumn, yyline);
            }
          case 98: break;
          case 40: 
            { return new Symbol(Simbolo.cajaf, yycolumn, yyline);
            }
          case 99: break;
          case 41: 
            { return new Symbol(Simbolo.alineado, yycolumn, yyline);
            }
          case 100: break;
          case 42: 
            { return new Symbol(Simbolo.htmlf, yycolumn, yyline);
            }
          case 101: break;
          case 43: 
            { return new Symbol(Simbolo.textof, yycolumn, yyline);
            }
          case 102: break;
          case 44: 
            { return new Symbol(Simbolo.tablaf, yycolumn, yyline);
            }
          case 103: break;
          case 45: 
            { return new Symbol(Simbolo.filf, yycolumn, yyline);
            }
          case 104: break;
          case 46: 
            { return new Symbol(Simbolo.botonf, yycolumn, yyline);
            }
          case 105: break;
          case 47: 
            { return new Symbol(Simbolo.panelf, yycolumn, yyline);
            }
          case 106: break;
          case 48: 
            { return new Symbol(Simbolo.salto, yycolumn, yyline);
            }
          case 107: break;
          case 49: 
            { return new Symbol(Simbolo.cuerpof, yycolumn, yyline);
            }
          case 108: break;
          case 50: 
            { return new Symbol(Simbolo.titulof, yycolumn, yyline);
            }
          case 109: break;
          case 51: 
            { return new Symbol(Simbolo.imagenf, yycolumn, yyline);
            }
          case 110: break;
          case 52: 
            { return new Symbol(Simbolo.enlacef, yycolumn, yyline);
            }
          case 111: break;
          case 53: 
            { return new Symbol(Simbolo.opcionf, yycolumn, yyline);
            }
          case 112: break;
          case 54: 
            { return new Symbol(Simbolo.cajati, yycolumn, yyline);
            }
          case 113: break;
          case 55: 
            { return new Symbol(Simbolo.encabezadoi, yycolumn, yyline);
            }
          case 114: break;
          case 56: 
            { return new Symbol(Simbolo.textoaf, yycolumn, yyline);
            }
          case 115: break;
          case 57: 
            { return new Symbol(Simbolo.spinnerf, yycolumn, yyline);
            }
          case 116: break;
          case 58: 
            { return new Symbol(Simbolo.cajatf, yycolumn, yyline);
            }
          case 117: break;
          case 59: 
            { return new Symbol(Simbolo.encabezadof, yycolumn, yyline);
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
