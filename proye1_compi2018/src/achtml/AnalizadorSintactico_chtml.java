
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package achtml;

import java_cup.runtime.Symbol;
import proye1_compi2018.Nodo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico_chtml extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolo.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico_chtml() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico_chtml(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico_chtml(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\006\000\002\003" +
    "\005\000\002\003\005\000\002\035\002\000\002\004\007" +
    "\000\002\036\002\000\002\004\007\000\002\013\010\000" +
    "\002\034\010\000\002\015\003\000\002\015\003\000\002" +
    "\005\004\000\002\005\004\000\002\006\013\000\002\006" +
    "\013\000\002\006\003\000\002\021\011\000\002\022\010" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\010\003\000\002\010\010\000\002\010\006\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\010\000\002\010\004\000\002\012\004\000" +
    "\002\012\002\000\002\011\006\000\002\011\006\000\002" +
    "\011\006\000\002\011\006\000\002\011\006\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\016\007\000\002\017\004\000" +
    "\002\017\003\000\002\024\007\000\002\020\004\000\002" +
    "\020\003\000\002\025\007\000\002\025\007\000\002\023" +
    "\004\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\026\010\000\002\014\004\000\002\014\003\000" +
    "\002\032\010\000\002\027\006\000\002\030\004\000\002" +
    "\030\005\000\002\031\010\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\033\004\001\002\000\004\004\313\001" +
    "\002\000\004\033\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\012\005\015\006\016\010" +
    "\014\030\011\001\002\000\030\017\uffde\020\uffde\025\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043" +
    "\uffde\062\uffde\001\002\000\012\012\260\014\257\033\ufffd" +
    "\044\255\001\002\000\004\033\uffff\001\002\000\004\017" +
    "\252\001\002\000\004\017\251\001\002\000\030\017\uffde" +
    "\020\uffde\025\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\043\uffde\062\uffde\001\002\000\036\006\016" +
    "\023\021\026\035\030\011\032\036\033\ufffb\046\046\050" +
    "\030\051\033\053\045\060\040\066\034\071\025\073\027" +
    "\001\002\000\036\006\uffe7\023\uffe7\026\uffe7\030\uffe7\032" +
    "\uffe7\033\uffe7\046\uffe7\050\uffe7\051\uffe7\053\uffe7\060\uffe7" +
    "\066\uffe7\071\uffe7\073\uffe7\001\002\000\030\017\uffde\020" +
    "\uffde\025\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\043\uffde\062\uffde\001\002\000\036\006\uffe6\023" +
    "\uffe6\026\uffe6\030\uffe6\032\uffe6\033\uffe6\046\uffe6\050\uffe6" +
    "\051\uffe6\053\uffe6\060\uffe6\066\uffe6\071\uffe6\073\uffe6\001" +
    "\002\000\036\006\016\023\021\026\035\030\011\032\036" +
    "\033\237\046\046\050\030\051\033\053\045\060\040\066" +
    "\034\071\025\073\027\001\002\000\036\006\uffe5\023\uffe5" +
    "\026\uffe5\030\uffe5\032\uffe5\033\uffe5\046\uffe5\050\uffe5\051" +
    "\uffe5\053\uffe5\060\uffe5\066\uffe5\071\uffe5\073\uffe5\001\002" +
    "\000\030\017\uffde\020\uffde\025\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\043\uffde\062\uffde\001\002" +
    "\000\006\033\220\076\222\001\002\000\004\017\163\001" +
    "\002\000\004\017\162\001\002\000\004\033\157\001\002" +
    "\000\036\006\uffee\023\uffee\026\uffee\030\uffee\032\uffee\033" +
    "\uffee\046\uffee\050\uffee\051\uffee\053\uffee\060\uffee\066\uffee" +
    "\071\uffee\073\uffee\001\002\000\030\017\uffde\020\uffde\025" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\043\uffde\062\uffde\001\002\000\030\017\uffde\020\uffde\025" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\043\uffde\062\uffde\001\002\000\030\017\uffde\020\uffde\025" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\043\uffde\062\uffde\001\002\000\004\017\136\001\002\000" +
    "\036\006\uffe8\023\uffe8\026\uffe8\030\uffe8\032\uffe8\033\uffe8" +
    "\046\uffe8\050\uffe8\051\uffe8\053\uffe8\060\uffe8\066\uffe8\071" +
    "\uffe8\073\uffe8\001\002\000\030\017\uffde\020\uffde\025\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043" +
    "\uffde\062\uffde\001\002\000\036\006\uffeb\023\uffeb\026\uffeb" +
    "\030\uffeb\032\uffeb\033\uffeb\046\uffeb\050\uffeb\051\uffeb\053" +
    "\uffeb\060\uffeb\066\uffeb\071\uffeb\073\uffeb\001\002\000\036" +
    "\006\uffe4\023\uffe4\026\uffe4\030\uffe4\032\uffe4\033\uffe4\046" +
    "\uffe4\050\uffe4\051\uffe4\053\uffe4\060\uffe4\066\uffe4\071\uffe4" +
    "\073\uffe4\001\002\000\036\006\uffe2\023\uffe2\026\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\046\uffe2\050\uffe2\051\uffe2\053\uffe2" +
    "\060\uffe2\066\uffe2\071\uffe2\073\uffe2\001\002\000\036\006" +
    "\uffe3\023\uffe3\026\uffe3\030\uffe3\032\uffe3\033\uffe3\046\uffe3" +
    "\050\uffe3\051\uffe3\053\uffe3\060\uffe3\066\uffe3\071\uffe3\073" +
    "\uffe3\001\002\000\030\017\uffde\020\uffde\025\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\062" +
    "\uffde\001\002\000\030\017\uffde\020\uffde\025\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\062" +
    "\uffde\001\002\000\030\017\056\020\051\025\054\034\050" +
    "\035\061\036\063\037\053\040\060\041\057\043\062\062" +
    "\052\001\002\000\004\021\117\001\002\000\004\021\114" +
    "\001\002\000\004\021\111\001\002\000\004\021\106\001" +
    "\002\000\004\021\103\001\002\000\030\017\uffdf\020\uffdf" +
    "\025\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\043\uffdf\062\uffdf\001\002\000\006\033\uffc1\076\uffc1" +
    "\001\002\000\004\021\100\001\002\000\004\021\075\001" +
    "\002\000\004\021\072\001\002\000\004\021\067\001\002" +
    "\000\004\021\064\001\002\000\004\022\065\001\002\000" +
    "\004\016\066\001\002\000\030\017\uffda\020\uffda\025\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\043" +
    "\uffda\062\uffda\001\002\000\004\022\070\001\002\000\004" +
    "\016\071\001\002\000\030\017\uffd6\020\uffd6\025\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6" +
    "\062\uffd6\001\002\000\004\022\073\001\002\000\004\016" +
    "\074\001\002\000\030\017\uffdb\020\uffdb\025\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\062" +
    "\uffdb\001\002\000\004\022\076\001\002\000\004\016\077" +
    "\001\002\000\030\017\uffd8\020\uffd8\025\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\043\uffd8\062\uffd8" +
    "\001\002\000\004\022\101\001\002\000\004\016\102\001" +
    "\002\000\030\017\uffd7\020\uffd7\025\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\062\uffd7\001" +
    "\002\000\004\022\104\001\002\000\004\016\105\001\002" +
    "\000\030\017\uffdc\020\uffdc\025\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\062\uffdc\001\002" +
    "\000\004\022\107\001\002\000\004\016\110\001\002\000" +
    "\030\017\uffd9\020\uffd9\025\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\043\uffd9\062\uffd9\001\002\000" +
    "\004\022\112\001\002\000\004\016\113\001\002\000\030" +
    "\017\uffd4\020\uffd4\025\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\043\uffd4\062\uffd4\001\002\000\004" +
    "\022\115\001\002\000\004\016\116\001\002\000\030\017" +
    "\uffd5\020\uffd5\025\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\043\uffd5\062\uffd5\001\002\000\004\022" +
    "\120\001\002\000\004\016\121\001\002\000\030\017\uffdd" +
    "\020\uffdd\025\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\043\uffdd\062\uffdd\001\002\000\030\017\123" +
    "\020\051\025\054\034\050\035\061\036\063\037\053\040" +
    "\060\041\057\043\062\062\052\001\002\000\004\070\124" +
    "\001\002\000\004\054\125\001\002\000\004\017\126\001" +
    "\002\000\036\006\uffe1\023\uffe1\026\uffe1\030\uffe1\032\uffe1" +
    "\033\uffe1\046\uffe1\050\uffe1\051\uffe1\053\uffe1\060\uffe1\066" +
    "\uffe1\071\uffe1\073\uffe1\001\002\000\030\017\130\020\051" +
    "\025\054\034\050\035\061\036\063\037\053\040\060\041" +
    "\057\043\062\062\052\001\002\000\006\033\131\070\132" +
    "\001\002\000\014\024\ufff6\045\ufff6\061\ufff6\067\ufff6\072" +
    "\ufff6\001\002\000\014\024\ufff7\045\ufff7\061\ufff7\067\ufff7" +
    "\072\ufff7\001\002\000\004\061\134\001\002\000\004\017" +
    "\135\001\002\000\036\006\uffc7\023\uffc7\026\uffc7\030\uffc7" +
    "\032\uffc7\033\uffc7\046\uffc7\050\uffc7\051\uffc7\053\uffc7\060" +
    "\uffc7\066\uffc7\071\uffc7\073\uffc7\001\002\000\036\006\uffe0" +
    "\023\uffe0\026\uffe0\030\uffe0\032\uffe0\033\uffe0\046\uffe0\050" +
    "\uffe0\051\uffe0\053\uffe0\060\uffe0\066\uffe0\071\uffe0\073\uffe0" +
    "\001\002\000\030\017\140\020\051\025\054\034\050\035" +
    "\061\036\063\037\053\040\060\041\057\043\062\062\052" +
    "\001\002\000\004\042\141\001\002\000\004\033\142\001" +
    "\002\000\004\027\143\001\002\000\004\017\144\001\002" +
    "\000\036\006\ufff0\023\ufff0\026\ufff0\030\ufff0\032\ufff0\033" +
    "\ufff0\046\ufff0\050\ufff0\051\ufff0\053\ufff0\060\ufff0\066\ufff0" +
    "\071\ufff0\073\ufff0\001\002\000\030\017\146\020\051\025" +
    "\054\034\050\035\061\036\063\037\053\040\060\041\057" +
    "\043\062\062\052\001\002\000\006\033\131\070\132\001" +
    "\002\000\004\067\150\001\002\000\004\017\151\001\002" +
    "\000\036\006\uffea\023\uffea\026\uffea\030\uffea\032\uffea\033" +
    "\uffea\046\uffea\050\uffea\051\uffea\053\uffea\060\uffea\066\uffea" +
    "\071\uffea\073\uffea\001\002\000\030\017\153\020\051\025" +
    "\054\034\050\035\061\036\063\037\053\040\060\041\057" +
    "\043\062\062\052\001\002\000\004\070\154\001\002\000" +
    "\004\052\155\001\002\000\004\017\156\001\002\000\036" +
    "\006\uffef\023\uffef\026\uffef\030\uffef\032\uffef\033\uffef\046" +
    "\uffef\050\uffef\051\uffef\053\uffef\060\uffef\066\uffef\071\uffef" +
    "\073\uffef\001\002\000\004\007\160\001\002\000\004\017" +
    "\161\001\002\000\004\033\ufffa\001\002\000\036\006\uffbf" +
    "\023\uffbf\026\uffbf\030\uffbf\032\uffbf\033\uffbf\046\uffbf\050" +
    "\uffbf\051\uffbf\053\uffbf\060\uffbf\066\uffbf\071\uffbf\073\uffbf" +
    "\001\002\000\006\033\uffd1\057\uffd1\001\002\000\006\033" +
    "\167\057\165\001\002\000\004\017\173\001\002\000\006" +
    "\033\uffd2\057\uffd2\001\002\000\004\074\170\001\002\000" +
    "\004\017\171\001\002\000\036\006\uffd3\023\uffd3\026\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\046\uffd3\050\uffd3\051\uffd3\053" +
    "\uffd3\060\uffd3\066\uffd3\071\uffd3\073\uffd3\001\002\000\010" +
    "\033\176\055\177\056\174\001\002\000\010\033\uffce\055" +
    "\uffce\056\uffce\001\002\000\004\017\214\001\002\000\010" +
    "\033\uffcf\055\uffcf\056\uffcf\001\002\000\004\065\212\001" +
    "\002\000\004\017\200\001\002\000\012\026\035\033\203" +
    "\051\033\070\205\001\002\000\004\033\211\001\002\000" +
    "\004\033\210\001\002\000\006\063\uffc9\064\uffc9\001\002" +
    "\000\004\063\206\001\002\000\006\063\uffc8\064\uffc8\001" +
    "\002\000\004\017\207\001\002\000\010\033\uffcc\055\uffcc" +
    "\056\uffcc\001\002\000\006\063\uffca\064\uffca\001\002\000" +
    "\006\063\uffcb\064\uffcb\001\002\000\004\017\213\001\002" +
    "\000\006\033\uffd0\057\uffd0\001\002\000\012\026\035\033" +
    "\203\051\033\070\205\001\002\000\004\064\216\001\002" +
    "\000\004\017\217\001\002\000\010\033\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\004\047\230\001\002\000\006\033\uffc2" +
    "\076\uffc2\001\002\000\030\017\uffde\020\uffde\025\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde" +
    "\062\uffde\001\002\000\030\017\224\020\051\025\054\034" +
    "\050\035\061\036\063\037\053\040\060\041\057\043\062" +
    "\062\052\001\002\000\004\070\225\001\002\000\004\075" +
    "\226\001\002\000\004\017\227\001\002\000\006\033\uffc0" +
    "\076\uffc0\001\002\000\004\017\231\001\002\000\036\006" +
    "\uffc3\023\uffc3\026\uffc3\030\uffc3\032\uffc3\033\uffc3\046\uffc3" +
    "\050\uffc3\051\uffc3\053\uffc3\060\uffc3\066\uffc3\071\uffc3\073" +
    "\uffc3\001\002\000\030\017\233\020\051\025\054\034\050" +
    "\035\061\036\063\037\053\040\060\041\057\043\062\062" +
    "\052\001\002\000\006\033\131\070\132\001\002\000\004" +
    "\072\235\001\002\000\004\017\236\001\002\000\036\006" +
    "\uffc4\023\uffc4\026\uffc4\030\uffc4\032\uffc4\033\uffc4\046\uffc4" +
    "\050\uffc4\051\uffc4\053\uffc4\060\uffc4\066\uffc4\071\uffc4\073" +
    "\uffc4\001\002\000\004\031\240\001\002\000\004\017\241" +
    "\001\002\000\036\006\uffe9\023\uffe9\026\uffe9\030\uffe9\032" +
    "\uffe9\033\uffe9\046\uffe9\050\uffe9\051\uffe9\053\uffe9\060\uffe9" +
    "\066\uffe9\071\uffe9\073\uffe9\001\002\000\030\017\243\020" +
    "\051\025\054\034\050\035\061\036\063\037\053\040\060" +
    "\041\057\043\062\062\052\001\002\000\006\033\131\070" +
    "\132\001\002\000\004\024\245\001\002\000\004\017\246" +
    "\001\002\000\036\006\ufff8\023\ufff8\026\ufff8\030\ufff8\032" +
    "\ufff8\033\ufff8\046\ufff8\050\ufff8\051\ufff8\053\ufff8\060\ufff8" +
    "\066\ufff8\071\ufff8\073\ufff8\001\002\000\030\017\250\020" +
    "\051\025\054\034\050\035\061\036\063\037\053\040\060" +
    "\041\057\043\062\062\052\001\002\000\036\006\uffed\023" +
    "\uffed\026\uffed\030\uffed\032\uffed\033\uffed\046\uffed\050\uffed" +
    "\051\uffed\053\uffed\060\uffed\066\uffed\071\uffed\073\uffed\001" +
    "\002\000\004\002\000\001\002\000\012\012\ufff4\014\ufff4" +
    "\033\ufff4\044\ufff4\001\002\000\012\012\ufff5\014\ufff5\033" +
    "\ufff5\044\ufff5\001\002\000\012\012\ufff1\014\ufff1\033\ufff1" +
    "\044\ufff1\001\002\000\030\017\uffde\020\uffde\025\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde" +
    "\062\uffde\001\002\000\004\033\301\001\002\000\004\020" +
    "\271\001\002\000\004\020\261\001\002\000\004\021\262" +
    "\001\002\000\004\022\263\001\002\000\004\016\264\001" +
    "\002\000\004\017\265\001\002\000\004\033\266\001\002" +
    "\000\004\013\267\001\002\000\004\017\270\001\002\000" +
    "\012\012\ufff3\014\ufff3\033\ufff3\044\ufff3\001\002\000\004" +
    "\021\272\001\002\000\004\022\273\001\002\000\004\016" +
    "\274\001\002\000\004\017\275\001\002\000\004\033\276" +
    "\001\002\000\004\015\277\001\002\000\004\017\300\001" +
    "\002\000\012\012\ufff2\014\ufff2\033\ufff2\044\ufff2\001\002" +
    "\000\004\011\302\001\002\000\004\017\303\001\002\000" +
    "\004\033\ufffc\001\002\000\030\017\305\020\051\025\054" +
    "\034\050\035\061\036\063\037\053\040\060\041\057\043" +
    "\062\062\052\001\002\000\006\033\131\070\132\001\002" +
    "\000\004\045\307\001\002\000\004\017\310\001\002\000" +
    "\012\012\ufff9\014\ufff9\033\ufff9\044\ufff9\001\002\000\030" +
    "\017\312\020\051\025\054\034\050\035\061\036\063\037" +
    "\053\040\060\041\057\043\062\062\052\001\002\000\036" +
    "\006\uffec\023\uffec\026\uffec\030\uffec\032\uffec\033\uffec\046" +
    "\uffec\050\uffec\051\uffec\053\uffec\060\uffec\066\uffec\071\uffec" +
    "\073\uffec\001\002\000\004\017\314\001\002\000\004\033" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\012\005\011\007\016\001\001\000\004\012" +
    "\310\001\001\000\010\006\252\013\253\035\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\246\001\001\000\032\007\022\010\031\016\036" +
    "\021\017\022\021\026\023\027\041\030\025\032\043\033" +
    "\042\034\040\036\030\001\001\000\002\001\001\000\004" +
    "\012\241\001\001\000\002\001\001\000\030\007\022\010" +
    "\031\016\036\021\017\022\021\026\023\027\041\030\025" +
    "\032\043\033\042\034\040\001\001\000\002\001\001\000" +
    "\004\012\231\001\001\000\004\031\220\001\001\000\004" +
    "\017\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\151\001\001\000\004\012\144" +
    "\001\001\000\004\012\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\121\001\001\000\004\012\046\001\001\000\004" +
    "\011\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\054\001\001\000\004\015\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\054" +
    "\001\001\000\004\015\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\165\001\001\000\004\020\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\201\022\200\023\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\201\022\200\023\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\222\001\001\000\004" +
    "\011\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\054\001\001\000\004\015\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\054\001\001\000\004\015\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\054\001\001\000\004\015\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico_chtml$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico_chtml$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico_chtml$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String resultado="";
	public Nodo padre;
	public int contador = 1;
  public String verror = "";
    @Override
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
        verror = verror + "Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +
          s.value + " no reconocido."+" CHTML"+"\n" ;
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
      /*
        System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+
            ". Identificador " + s.value + " no reconocido.");
        verror= verror+ "Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+
        ". Identificador " +s.value + " no reconocido."+" CHTML"+"\n" ;  */
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico_chtml$actions {


   

  private final AnalizadorSintactico_chtml parser;

  /** Constructor */
  CUP$AnalizadorSintactico_chtml$actions(AnalizadorSintactico_chtml parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_chtml$do_action_part00000000(
    int                        CUP$AnalizadorSintactico_chtml$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_chtml$parser,
    java.util.Stack            CUP$AnalizadorSintactico_chtml$stack,
    int                        CUP$AnalizadorSintactico_chtml$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico_chtml$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico_chtml$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico_chtml$parser.done_parsing();
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS abierto htmlf cierre 
            {
              Object RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).right;
		Object sts = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		 
            parser.padre = (Nodo) sts;
            System.out.println("DOCUMENTO OK"); 
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS abierto MEDIO 
            {
              Object RESULT =null;
		int stsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object sts = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object md = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		 
               Nodo temp;
               temp = (Nodo) sts;
               temp.addHijo((Nodo)md);
               RESULT=temp;
            
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= abierto htmli cierre 
            {
              Object RESULT =null;
		
                Nodo tmp = new Nodo("INICIO");
                tmp.setNumNodo(parser.contador++); 
                RESULT=tmp;
            
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
 
            RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MEDIO ::= ENCABEZADO NT$0 abierto encabezadof cierre 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;

              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("MEDIO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MEDIO ::= CUERPO NT$1 abierto cuerpof cierre 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;

              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("MEDIO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TITULO ::= tituloi COMPLEMETO cierre INTERNO_TITULO titulof cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		 
                  Nodo tmp = new Nodo("TITULO");
                  tmp.setNumNodo(parser.contador++); 
                  tmp.addHijo((Nodo)comp);
                  tmp.addHijo((Nodo)con);               
                  RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("TITULO",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TEXTO ::= textoi COMPLEMETO cierre INTERNO_TITULO textof cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		 
                  Nodo tmp = new Nodo("TITULO");
                  tmp.setNumNodo(parser.contador++); 
                  tmp.addHijo((Nodo)comp);
                  tmp.addHijo((Nodo)con);               
                  RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("TEXTO",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INTERNO_TITULO ::= palabra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		  
                       Nodo tmp = new Nodo(i.toString());
                       tmp.setNumNodo(parser.contador++); 
                       tmp.setValor(i.toString());
                       RESULT=tmp;
                  
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INTERNO_TITULO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INTERNO_TITULO ::= abierto 
            {
              Object RESULT =null;
		  
                       Nodo tmp = new Nodo("");
                       tmp.setNumNodo(parser.contador++); 
                       tmp.setValor(null);
                       RESULT=tmp;
                     
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INTERNO_TITULO",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ENCABEZADO ::= ENCABEZADO INT_ENCABEZADO 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int encright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		 
               Nodo temp;
               temp = (Nodo) enc;
               temp.addHijo((Nodo)inc);
               RESULT=temp;
           
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ENCABEZADO ::= encabezadoi cierre 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("encabezado");
                    tmp.setNumNodo(parser.contador++);
                    RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INT_ENCABEZADO ::= cjsi ruta igual cadena ptc cierre abierto cjsf cierre 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).value;
		 
                    Nodo tmp = new Nodo("CJS");
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);
                    tmp.setNumNodo(parser.contador++);
                    RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INT_ENCABEZADO ::= ccssi ruta igual cadena ptc cierre abierto ccssf cierre 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).value;
		 
                    Nodo tmp = new Nodo("CCSS");
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);
                    tmp.setNumNodo(parser.contador++);
                    RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INT_ENCABEZADO ::= TITULO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_ENCABEZADO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IMAGEN ::= imageni COMPLEMETO cierre path abierto imagenf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		 
                    Nodo tmp = new Nodo("IMAGEN");
                    String str = i.toString();
                    tmp.setValor(str);
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)comp);
                    RESULT=tmp; 
           
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("IMAGEN",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BOTON ::= botoni COMPLEMETO cierre palabra botonf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		 
                    Nodo tmp = new Nodo("BOTON");
                    String str = i.toString();
                    tmp.setValor(str);
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)comp);
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("BOTON",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= CUERPO INT_CUERPO 
            {
              Object RESULT =null;
		int encleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int encright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object enc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		 
               Nodo temp;
               temp = (Nodo) enc;
               temp.addHijo((Nodo)inc);
               RESULT=temp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO ::= cuerpoi COMPLEMETO cierre 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
            Nodo temp = new Nodo("CUERPO");
            temp.addHijo((Nodo)tmp);
            RESULT=temp; 
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO ::= paneli COMPLEMETO cierre 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
            Nodo temp = new Nodo("PANEL");
            temp.addHijo((Nodo)tmp);
            RESULT=temp; 
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CUERPO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INT_CUERPO ::= TEXTO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INT_CUERPO ::= textoai COMPLEMETO cierre INTERNO_TITULO textoaf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		
                    Nodo tmp = new Nodo("TEXTOA");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)comp);
                    tmp.addHijo((Nodo)con);
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INT_CUERPO ::= CUERPO abierto panelf cierre 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		 
                    RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INT_CUERPO ::= TABLA 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		 
                  RESULT=tmp;
                
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INT_CUERPO ::= IMAGEN 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INT_CUERPO ::= BOTON 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  RESULT= tmp;
                
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INT_CUERPO ::= CAJA_TEXTO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  RESULT= tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INT_CUERPO ::= CAJA 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  RESULT= tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INT_CUERPO ::= SPINNER 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  RESULT= tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INT_CUERPO ::= SALTO 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  RESULT= tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INT_CUERPO ::= enlacei COMPLEMETO cierre palabra enlacef cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		 
                    Nodo tmp = new Nodo("ENLACE");
                    String str = i.toString();
                    tmp.setValor(str);
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)comp);
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INT_CUERPO ::= caja cierre 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		
                    Nodo tmp = new Nodo("TEXTO");
                    tmp.setValor(i.toString());
                    tmp.setNumNodo(parser.contador++);
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("INT_CUERPO",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMPLEMETO ::= COMPLEMETO ELEMENTO 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  Nodo temp;
                  temp = (Nodo) i;
                  temp.addHijo((Nodo) el);
                  RESULT=temp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("COMPLEMETO",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMPLEMETO ::= 
            {
              Object RESULT =null;
		 
                    Nodo tmp = new Nodo("COMPLEMETO");
                    tmp.setNumNodo(parser.contador++);      
                    RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("COMPLEMETO",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELEMENTO ::= ids igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("ID");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELEMENTO ::= fondo igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		
                     Nodo tmp = new Nodo("FONDO");
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);
                    tmp.setNumNodo(parser.contador++);
                    RESULT=tmp; 
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELEMENTO ::= grupo igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("GRUPO");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTO ::= alto igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("ALTO");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTO ::= ancho igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("ANCHO");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO ::= alineado igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("ALINEADO");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO ::= ccss igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("CCSS");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO ::= click igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("CLICK");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO ::= ruta igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("RUTA");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO ::= valor igual cadena ptc 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
                    Nodo tmp = new Nodo("VALOR");
                    tmp.setNumNodo(parser.contador++);
                    String str = i.toString();
                    String ncadena=str.substring(1,str.length()-1);
                    tmp.setValor(ncadena);       
                    RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("ELEMENTO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TABLA ::= tablai DENTRO_TABLA abierto tablaf cierre 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		 
                  RESULT=tmp;
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("TABLA",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DENTRO_TABLA ::= DENTRO_TABLA FILL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		 
                  Nodo temp;
                  temp = (Nodo) i;
                  temp.addHijo((Nodo) el);
                  RESULT=temp; 
                
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("DENTRO_TABLA",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DENTRO_TABLA ::= cierre 
            {
              Object RESULT =null;
		 
                  Nodo tmp = new Nodo("TABLA");
                  tmp.setNumNodo(parser.contador++);
                  RESULT=tmp;
                  
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("DENTRO_TABLA",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FILL ::= fili DENTRO_FIL abierto filf cierre 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		 
              RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("FILL",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DENTRO_FIL ::= DENTRO_FIL CONTENIDO_FILL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  Nodo temp;
                  temp = (Nodo) i;
                  temp.addHijo((Nodo) el);
                  RESULT=temp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("DENTRO_FIL",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DENTRO_FIL ::= cierre 
            {
              Object RESULT =null;
		 
                Nodo tmp = new Nodo("FIL");
                tmp.setNumNodo(parser.contador++);
                RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("DENTRO_FIL",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTENIDO_FILL ::= cbi cierre CELDA cbf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		
                    Nodo tmp = new Nodo("CB");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)comp);
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FILL",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTENIDO_FILL ::= cti cierre CELDA ctf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		
                    Nodo tmp = new Nodo("CT");
                    tmp.setNumNodo(parser.contador++);
                    tmp.addHijo((Nodo)comp);
                    RESULT=tmp; 
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CONTENIDO_FILL",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CELDA ::= BOTON abierto 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
          RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CELDA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CELDA ::= IMAGEN abierto 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
          RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CELDA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CELDA ::= abierto 
            {
              Object RESULT =null;
		 
          Nodo tmp = new Nodo("PALABRA");
          tmp.setValor("");
          RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CELDA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CELDA ::= palabra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		
                  Nodo tmp = new Nodo("PALABRA");
                  tmp.setValor(i.toString());
                  tmp.setNumNodo(parser.contador++); 
                  RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CELDA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CAJA_TEXTO ::= cajati COMPLEMETO cierre INTERNO_TITULO cajatf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		
                  Nodo tmp = new Nodo("CAJA_TEXTO");
                  Nodo temp;
                  temp = (Nodo) con;
                  tmp.setValor(temp.getNombre());
                  tmp.addHijo((Nodo) comp);
                  RESULT=tmp;

            
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CAJA_TEXTO",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTENIDO ::= palabra abierto 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		
                  Nodo tmp = new Nodo(i.toString());
                  tmp.setNumNodo(parser.contador++); 
                  RESULT=tmp;
              
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTENIDO ::= abierto 
            {
              Object RESULT =null;
		 
                  Nodo tmp = new Nodo(null);
                  tmp.setNumNodo(parser.contador++); 
                  RESULT=tmp;
                
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SPINNER ::= spinneri COMPLEMETO cierre INTERNO_TITULO spinnerf cierre 
            {
              Object RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object comp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		
                  Nodo tmp = new Nodo("SPINNER");
                  Nodo temp;
                  temp = (Nodo) con;
                  tmp.setValor(temp.getNombre());
                  tmp.addHijo((Nodo) comp);
                  RESULT=tmp;
            
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("SPINNER",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CAJA ::= DENTRO_CAJA abierto cajaf cierre 
            {
              Object RESULT =null;
		int tmpleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).left;
		int tmpright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).right;
		Object tmp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)).value;
		 
            RESULT=tmp;
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("CAJA",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DENTRO_CAJA ::= DENTRO_CAJA OPCIONES 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.peek()).value;
		 
                Nodo temp;
                temp = (Nodo) i;
                temp.addHijo((Nodo) el);
                RESULT=temp;
            
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("DENTRO_CAJA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DENTRO_CAJA ::= cajai COMPLEMETO cierre 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)).value;
		 
               Nodo tmp = new Nodo("CAJA");
               tmp.addHijo((Nodo)com);
               RESULT=tmp; 
          
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("DENTRO_CAJA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPCIONES ::= opcioni COMPLEMETO cierre palabra opcionf cierre 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-2)).value;
		 
                  Nodo tmp = new Nodo("OPCION");
                  tmp.setValor(i.toString());  
                  tmp.addHijo((Nodo)com);
                  RESULT=tmp; 
        
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("OPCIONES",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SALTO ::= salto cierre 
            {
              Object RESULT =null;
		 
           Nodo tmp = new Nodo("SALTO");
           RESULT=tmp; 
      
              CUP$AnalizadorSintactico_chtml$result = parser.getSymbolFactory().newSymbol("SALTO",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.elementAt(CUP$AnalizadorSintactico_chtml$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico_chtml$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico_chtml$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico_chtml$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico_chtml$do_action(
    int                        CUP$AnalizadorSintactico_chtml$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico_chtml$parser,
    java.util.Stack            CUP$AnalizadorSintactico_chtml$stack,
    int                        CUP$AnalizadorSintactico_chtml$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico_chtml$do_action_part00000000(
                               CUP$AnalizadorSintactico_chtml$act_num,
                               CUP$AnalizadorSintactico_chtml$parser,
                               CUP$AnalizadorSintactico_chtml$stack,
                               CUP$AnalizadorSintactico_chtml$top);
    }
}

}
